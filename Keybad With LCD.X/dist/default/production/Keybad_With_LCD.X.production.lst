

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Mon Jul 20 12:20:09 2020

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2
    19                           	psect	text9,local,class=CODE,merge=1,delta=2
    20                           	psect	text10,local,class=CODE,merge=1,delta=2
    21                           	dabs	1,0x7E,2
    22  0000                     
    23                           ; Version 1.41
    24                           ; Generated 25/01/2017 GMT
    25                           ; 
    26                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC16F877A Definitions
    55                           ; 
    56                           ; SFR Addresses
    57  0000                     	;# 
    58  0001                     	;# 
    59  0002                     	;# 
    60  0003                     	;# 
    61  0004                     	;# 
    62  0005                     	;# 
    63  0006                     	;# 
    64  0007                     	;# 
    65  0008                     	;# 
    66  0009                     	;# 
    67  000A                     	;# 
    68  000B                     	;# 
    69  000C                     	;# 
    70  000D                     	;# 
    71  000E                     	;# 
    72  000E                     	;# 
    73  000F                     	;# 
    74  0010                     	;# 
    75  0011                     	;# 
    76  0012                     	;# 
    77  0013                     	;# 
    78  0014                     	;# 
    79  0015                     	;# 
    80  0015                     	;# 
    81  0016                     	;# 
    82  0017                     	;# 
    83  0018                     	;# 
    84  0019                     	;# 
    85  001A                     	;# 
    86  001B                     	;# 
    87  001B                     	;# 
    88  001C                     	;# 
    89  001D                     	;# 
    90  001E                     	;# 
    91  001F                     	;# 
    92  0081                     	;# 
    93  0085                     	;# 
    94  0086                     	;# 
    95  0087                     	;# 
    96  0088                     	;# 
    97  0089                     	;# 
    98  008C                     	;# 
    99  008D                     	;# 
   100  008E                     	;# 
   101  0091                     	;# 
   102  0092                     	;# 
   103  0093                     	;# 
   104  0094                     	;# 
   105  0098                     	;# 
   106  0099                     	;# 
   107  009C                     	;# 
   108  009D                     	;# 
   109  009E                     	;# 
   110  009F                     	;# 
   111  010C                     	;# 
   112  010D                     	;# 
   113  010E                     	;# 
   114  010F                     	;# 
   115  018C                     	;# 
   116  018D                     	;# 
   117  0000                     	;# 
   118  0001                     	;# 
   119  0002                     	;# 
   120  0003                     	;# 
   121  0004                     	;# 
   122  0005                     	;# 
   123  0006                     	;# 
   124  0007                     	;# 
   125  0008                     	;# 
   126  0009                     	;# 
   127  000A                     	;# 
   128  000B                     	;# 
   129  000C                     	;# 
   130  000D                     	;# 
   131  000E                     	;# 
   132  000E                     	;# 
   133  000F                     	;# 
   134  0010                     	;# 
   135  0011                     	;# 
   136  0012                     	;# 
   137  0013                     	;# 
   138  0014                     	;# 
   139  0015                     	;# 
   140  0015                     	;# 
   141  0016                     	;# 
   142  0017                     	;# 
   143  0018                     	;# 
   144  0019                     	;# 
   145  001A                     	;# 
   146  001B                     	;# 
   147  001B                     	;# 
   148  001C                     	;# 
   149  001D                     	;# 
   150  001E                     	;# 
   151  001F                     	;# 
   152  0081                     	;# 
   153  0085                     	;# 
   154  0086                     	;# 
   155  0087                     	;# 
   156  0088                     	;# 
   157  0089                     	;# 
   158  008C                     	;# 
   159  008D                     	;# 
   160  008E                     	;# 
   161  0091                     	;# 
   162  0092                     	;# 
   163  0093                     	;# 
   164  0094                     	;# 
   165  0098                     	;# 
   166  0099                     	;# 
   167  009C                     	;# 
   168  009D                     	;# 
   169  009E                     	;# 
   170  009F                     	;# 
   171  010C                     	;# 
   172  010D                     	;# 
   173  010E                     	;# 
   174  010F                     	;# 
   175  018C                     	;# 
   176  018D                     	;# 
   177  0000                     	;# 
   178  0001                     	;# 
   179  0002                     	;# 
   180  0003                     	;# 
   181  0004                     	;# 
   182  0005                     	;# 
   183  0006                     	;# 
   184  0007                     	;# 
   185  0008                     	;# 
   186  0009                     	;# 
   187  000A                     	;# 
   188  000B                     	;# 
   189  000C                     	;# 
   190  000D                     	;# 
   191  000E                     	;# 
   192  000E                     	;# 
   193  000F                     	;# 
   194  0010                     	;# 
   195  0011                     	;# 
   196  0012                     	;# 
   197  0013                     	;# 
   198  0014                     	;# 
   199  0015                     	;# 
   200  0015                     	;# 
   201  0016                     	;# 
   202  0017                     	;# 
   203  0018                     	;# 
   204  0019                     	;# 
   205  001A                     	;# 
   206  001B                     	;# 
   207  001B                     	;# 
   208  001C                     	;# 
   209  001D                     	;# 
   210  001E                     	;# 
   211  001F                     	;# 
   212  0081                     	;# 
   213  0085                     	;# 
   214  0086                     	;# 
   215  0087                     	;# 
   216  0088                     	;# 
   217  0089                     	;# 
   218  008C                     	;# 
   219  008D                     	;# 
   220  008E                     	;# 
   221  0091                     	;# 
   222  0092                     	;# 
   223  0093                     	;# 
   224  0094                     	;# 
   225  0098                     	;# 
   226  0099                     	;# 
   227  009C                     	;# 
   228  009D                     	;# 
   229  009E                     	;# 
   230  009F                     	;# 
   231  010C                     	;# 
   232  010D                     	;# 
   233  010E                     	;# 
   234  010F                     	;# 
   235  018C                     	;# 
   236  018D                     	;# 
   237                           
   238                           	psect	idataBANK0
   239  048C                     __pidataBANK0:	
   240                           
   241                           ;initializer for _line
   242  048C  3401               	retlw	low ((STR_1-__stringbase)| (0+32768))
   243  0008                     _PORTD	set	8
   244  0034                     _RB4	set	52
   245  0035                     _RB5	set	53
   246  0033                     _RB3	set	51
   247  0032                     _RB2	set	50
   248  0031                     _RB1	set	49
   249  0030                     _RB0	set	48
   250  0043                     _RD3	set	67
   251  0042                     _RD2	set	66
   252  0041                     _RD1	set	65
   253  0047                     _RD7	set	71
   254  0046                     _RD6	set	70
   255  0045                     _RD5	set	69
   256  0044                     _RD4	set	68
   257  0040                     _RD0	set	64
   258  0086                     _TRISB	set	134
   259  0088                     _TRISD	set	136
   260  0435                     _TRISB5	set	1077
   261  0434                     _TRISB4	set	1076
   262                           
   263                           	psect	strings
   264  0003                     __pstrings:	
   265  0003                     stringtab:	
   266  0003                     __stringtab:	
   267  0003                     stringcode:	
   268                           ;	String table - string pointers are 1 byte each
   269                           
   270  0003                     stringdir:	
   271  0003  3000               	movlw	high stringdir
   272  0004  008A               	movwf	10
   273  0005  0804               	movf	4,w
   274  0006  0A84               	incf	4,f
   275  0007  0782               	addwf	2,f
   276  0008                     __stringbase:	
   277  0008  3400               	retlw	0
   278  0009                     __end_of__stringtab:	
   279  0009                     STR_1:	
   280  0009  3445               	retlw	69	;'E'
   281  000A  346E               	retlw	110	;'n'
   282  000B  3474               	retlw	116	;'t'
   283  000C  3465               	retlw	101	;'e'
   284  000D  3472               	retlw	114	;'r'
   285  000E  3420               	retlw	32	;' '
   286  000F  344B               	retlw	75	;'K'
   287  0010  3465               	retlw	101	;'e'
   288  0011  3479               	retlw	121	;'y'
   289  0012  3400               	retlw	0
   290  0013                     STR_2:	
   291  0013  3457               	retlw	87	;'W'
   292  0014  3465               	retlw	101	;'e'
   293  0015  346C               	retlw	108	;'l'
   294  0016  3463               	retlw	99	;'c'
   295  0017  346F               	retlw	111	;'o'
   296  0018  346D               	retlw	109	;'m'
   297  0019  3465               	retlw	101	;'e'
   298  001A  3400               	retlw	0
   299  001B  3400               	retlw	0
   300                           
   301                           ; #config settings
   302  0000                     
   303                           	psect	cinit
   304  07F7                     start_initialization:	
   305  07F7                     __initialization:	
   306                           
   307                           ; Initialize objects allocated to BANK0
   308  07F7  120A  118A  248C   	fcall	__pidataBANK0	;fetch initializer
   309  07FA  00A0               	movwf	__pdataBANK0& (0+127)
   310                           
   311                           ; Clear objects allocated to COMMON
   312  07FB  01FD               	clrf	__pbssCOMMON& (0+127)
   313  07FC                     end_of_initialization:	
   314                           ;End of C runtime variable initialization code
   315                           
   316  07FC                     __end_of__initialization:	
   317  07FC  0183               	clrf	3
   318  07FD  120A  118A  2E74   	ljmp	_main	;jump to C main() function
   319                           
   320                           	psect	bssCOMMON
   321  007D                     __pbssCOMMON:	
   322  007D                     _key:	
   323  007D                     	ds	1
   324                           
   325                           	psect	dataBANK0
   326  0020                     __pdataBANK0:	
   327  0020                     _line:	
   328  0020                     	ds	1
   329                           
   330                           	psect	cstackCOMMON
   331  0070                     __pcstackCOMMON:	
   332  0070                     ?_LCD_Data:	
   333  0070                     ??_LCD_Data:	
   334                           ; 1 bytes @ 0x0
   335                           
   336  0070                     ?_LCD_Command:	
   337                           ; 1 bytes @ 0x0
   338                           
   339  0070                     ?_Keybad_Init:	
   340                           ; 1 bytes @ 0x0
   341                           
   342  0070                     ??_Keybad_Init:	
   343                           ; 1 bytes @ 0x0
   344                           
   345  0070                     ?_Keybad_Scanner:	
   346                           ; 1 bytes @ 0x0
   347                           
   348  0070                     ??_Keybad_Scanner:	
   349                           ; 1 bytes @ 0x0
   350                           
   351  0070                     ?_LCD_Init:	
   352                           ; 1 bytes @ 0x0
   353                           
   354  0070                     ?_LCD_Write_Char:	
   355                           ; 1 bytes @ 0x0
   356                           
   357  0070                     ?_LCD_Write_String:	
   358                           ; 1 bytes @ 0x0
   359                           
   360  0070                     ?_LCD_Clear:	
   361                           ; 1 bytes @ 0x0
   362                           
   363  0070                     ?_Entry_Mode_Set:	
   364                           ; 1 bytes @ 0x0
   365                           
   366  0070                     ?_main:	
   367                           ; 1 bytes @ 0x0
   368                           
   369  0070                     LCD_Data@Data:	
   370                           ; 1 bytes @ 0x0
   371                           
   372                           
   373                           ; 1 bytes @ 0x0
   374  0070                     	ds	1
   375  0071                     ??_LCD_Command:	
   376  0071                     ??_LCD_Write_Char:	
   377                           ; 1 bytes @ 0x1
   378                           
   379                           
   380                           ; 1 bytes @ 0x1
   381  0071                     	ds	1
   382  0072                     LCD_Command@command:	
   383  0072                     LCD_Write_Char@Low4:	
   384                           ; 1 bytes @ 0x2
   385                           
   386                           
   387                           ; 1 bytes @ 0x2
   388  0072                     	ds	1
   389  0073                     ??_LCD_Init:	
   390  0073                     ?_LCD_set_cursor:	
   391                           ; 1 bytes @ 0x3
   392                           
   393  0073                     ??_LCD_Clear:	
   394                           ; 1 bytes @ 0x3
   395                           
   396  0073                     ??_Entry_Mode_Set:	
   397                           ; 1 bytes @ 0x3
   398                           
   399  0073                     LCD_Write_Char@High4:	
   400                           ; 1 bytes @ 0x3
   401                           
   402  0073                     LCD_set_cursor@c:	
   403                           ; 1 bytes @ 0x3
   404                           
   405                           
   406                           ; 1 bytes @ 0x3
   407  0073                     	ds	1
   408  0074                     ??_LCD_set_cursor:	
   409  0074                     LCD_Write_Char@Data:	
   410                           ; 1 bytes @ 0x4
   411                           
   412                           
   413                           ; 1 bytes @ 0x4
   414  0074                     	ds	1
   415  0075                     ??_LCD_Write_String:	
   416  0075                     LCD_Write_String@i:	
   417                           ; 1 bytes @ 0x5
   418                           
   419                           
   420                           ; 2 bytes @ 0x5
   421  0075                     	ds	1
   422  0076                     LCD_set_cursor@r:	
   423                           
   424                           ; 1 bytes @ 0x6
   425  0076                     	ds	1
   426  0077                     LCD_Write_String@Str:	
   427  0077                     LCD_set_cursor@high4:	
   428                           ; 1 bytes @ 0x7
   429                           
   430                           
   431                           ; 1 bytes @ 0x7
   432  0077                     	ds	1
   433  0078                     LCD_set_cursor@low4:	
   434                           
   435                           ; 1 bytes @ 0x8
   436  0078                     	ds	1
   437  0079                     LCD_set_cursor@temp:	
   438                           
   439                           ; 1 bytes @ 0x9
   440  0079                     	ds	1
   441  007A                     ??_main:	
   442                           
   443                           ; 1 bytes @ 0xA
   444  007A                     	ds	3
   445                           
   446                           	psect	maintext
   447  0674                     __pmaintext:	
   448 ;;
   449 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   450 ;;
   451 ;; *************** function _main *****************
   452 ;; Defined at:
   453 ;;		line 15 in file "main.c"
   454 ;; Parameters:    Size  Location     Type
   455 ;;		None
   456 ;; Auto vars:     Size  Location     Type
   457 ;;		None
   458 ;; Return value:  Size  Location     Type
   459 ;;                  1    wreg      void 
   460 ;; Registers used:
   461 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   462 ;; Tracked objects:
   463 ;;		On entry : B00/0
   464 ;;		On exit  : 0/0
   465 ;;		Unchanged: 0/0
   466 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   467 ;;      Params:         0       0       0       0       0
   468 ;;      Locals:         0       0       0       0       0
   469 ;;      Temps:          3       0       0       0       0
   470 ;;      Totals:         3       0       0       0       0
   471 ;;Total ram usage:        3 bytes
   472 ;; Hardware stack levels required when called:    3
   473 ;; This function calls:
   474 ;;		_Entry_Mode_Set
   475 ;;		_Keybad_Init
   476 ;;		_Keybad_Scanner
   477 ;;		_LCD_Clear
   478 ;;		_LCD_Init
   479 ;;		_LCD_Write_Char
   480 ;;		_LCD_Write_String
   481 ;;		_LCD_set_cursor
   482 ;; This function is called by:
   483 ;;		Startup code after reset
   484 ;; This function uses a non-reentrant model
   485 ;;
   486                           
   487                           
   488                           ;psect for function _main
   489  0674                     _main:	
   490                           
   491                           ;main.c: 16: LCD_Clear();
   492                           
   493                           ;incstack = 0
   494                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   495  0674  120A  118A  24A0  120A  118A  	fcall	_LCD_Clear
   496                           
   497                           ;main.c: 17: LCD_Init();
   498  0679  120A  118A  258B  120A  118A  	fcall	_LCD_Init
   499                           
   500                           ;main.c: 18: Keybad_Init();
   501  067E  120A  118A  248D  120A  118A  	fcall	_Keybad_Init
   502                           
   503                           ;main.c: 19: LCD_set_cursor(1,1);
   504  0683  01F3               	clrf	LCD_set_cursor@c
   505  0684  0AF3               	incf	LCD_set_cursor@c,f
   506  0685  3001               	movlw	1
   507  0686  120A  118A  2540  120A  118A  	fcall	_LCD_set_cursor
   508                           
   509                           ;main.c: 20: LCD_Write_String("Welcome\0");
   510  068B  300B               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   511  068C  120A  118A  24DB  120A  118A  	fcall	_LCD_Write_String
   512                           
   513                           ;main.c: 21: _delay((unsigned long)((500)*(4000000/4000.0)));
   514  0691  3003               	movlw	3
   515  0692  00FC               	movwf	??_main+2
   516  0693  308A               	movlw	138
   517  0694  00FB               	movwf	??_main+1
   518  0695  3055               	movlw	85
   519  0696  00FA               	movwf	??_main
   520  0697                     u877:	
   521  0697  0BFA               	decfsz	??_main,f
   522  0698  2E97               	goto	u877
   523  0699  0BFB               	decfsz	??_main+1,f
   524  069A  2E97               	goto	u877
   525  069B  0BFC               	decfsz	??_main+2,f
   526  069C  2E97               	goto	u877
   527  069D  2E9E               	nop2
   528                           
   529                           ;main.c: 22: LCD_Clear();
   530  069E  120A  118A  24A0  120A  118A  	fcall	_LCD_Clear
   531                           
   532                           ;main.c: 23: LCD_set_cursor(1,1);
   533  06A3  01F3               	clrf	LCD_set_cursor@c
   534  06A4  0AF3               	incf	LCD_set_cursor@c,f
   535  06A5  3001               	movlw	1
   536  06A6  120A  118A  2540  120A  118A  	fcall	_LCD_set_cursor
   537                           
   538                           ;main.c: 27: LCD_Write_String(line);
   539  06AB  1283               	bcf	3,5	;RP0=0, select bank0
   540  06AC  1303               	bcf	3,6	;RP1=0, select bank0
   541  06AD  0820               	movf	_line,w
   542  06AE  120A  118A  24DB  120A  118A  	fcall	_LCD_Write_String
   543                           
   544                           ;main.c: 28: Entry_Mode_Set();
   545  06B3  120A  118A  2495  120A  118A  	fcall	_Entry_Mode_Set
   546                           
   547                           ;main.c: 29: LCD_set_cursor(2,1);
   548  06B8  01F3               	clrf	LCD_set_cursor@c
   549  06B9  0AF3               	incf	LCD_set_cursor@c,f
   550  06BA  3002               	movlw	2
   551  06BB  120A  118A  2540  120A  118A  	fcall	_LCD_set_cursor
   552                           
   553                           ;main.c: 30: key = Keybad_Scanner();
   554  06C0  120A  118A  25EB  120A  118A  	fcall	_Keybad_Scanner
   555  06C5  00FA               	movwf	??_main
   556  06C6  087A               	movf	??_main,w
   557  06C7  00FD               	movwf	_key
   558                           
   559                           ;main.c: 32: switch (key) {
   560  06C8  2FC4               	goto	l1303
   561  06C9                     l1207:	
   562                           ;main.c: 34: case '1' : key = '1' ; LCD_Write_Char(key); break ;
   563                           
   564  06C9  3031               	movlw	49
   565  06CA  00FA               	movwf	??_main
   566  06CB  087A               	movf	??_main,w
   567  06CC  00FD               	movwf	_key
   568  06CD  087D               	movf	_key,w
   569  06CE  120A  118A  24FD  120A  118A  	fcall	_LCD_Write_Char
   570  06D3  2FF6               	goto	l163
   571  06D4                     l1211:	
   572                           ;main.c: 35: case '2' : key = '2' ; Entry_Mode_Set(); LCD_Write_Char(key); break ;
   573                           
   574  06D4  3032               	movlw	50
   575  06D5  00FA               	movwf	??_main
   576  06D6  087A               	movf	??_main,w
   577  06D7  00FD               	movwf	_key
   578  06D8  120A  118A  2495  120A  118A  	fcall	_Entry_Mode_Set
   579  06DD  087D               	movf	_key,w
   580  06DE  120A  118A  24FD  120A  118A  	fcall	_LCD_Write_Char
   581  06E3  2FF6               	goto	l163
   582  06E4                     l1217:	
   583                           ;main.c: 36: case '3' : key = '3' ; Entry_Mode_Set(); LCD_Write_Char(key); break ;
   584                           
   585  06E4  3033               	movlw	51
   586  06E5  00FA               	movwf	??_main
   587  06E6  087A               	movf	??_main,w
   588  06E7  00FD               	movwf	_key
   589  06E8  120A  118A  2495  120A  118A  	fcall	_Entry_Mode_Set
   590  06ED  087D               	movf	_key,w
   591  06EE  120A  118A  24FD  120A  118A  	fcall	_LCD_Write_Char
   592  06F3  2FF6               	goto	l163
   593  06F4                     l1223:	
   594                           ;main.c: 37: case '4' : key = '4' ; Entry_Mode_Set(); LCD_Write_Char(key); break ;
   595                           
   596  06F4  3034               	movlw	52
   597  06F5  00FA               	movwf	??_main
   598  06F6  087A               	movf	??_main,w
   599  06F7  00FD               	movwf	_key
   600  06F8  120A  118A  2495  120A  118A  	fcall	_Entry_Mode_Set
   601  06FD  087D               	movf	_key,w
   602  06FE  120A  118A  24FD  120A  118A  	fcall	_LCD_Write_Char
   603  0703  2FF6               	goto	l163
   604  0704                     l1229:	
   605                           ;main.c: 38: case '5' : key = '5' ; Entry_Mode_Set(); LCD_Write_Char(key); break ;
   606                           
   607  0704  3035               	movlw	53
   608  0705  00FA               	movwf	??_main
   609  0706  087A               	movf	??_main,w
   610  0707  00FD               	movwf	_key
   611  0708  120A  118A  2495  120A  118A  	fcall	_Entry_Mode_Set
   612  070D  087D               	movf	_key,w
   613  070E  120A  118A  24FD  120A  118A  	fcall	_LCD_Write_Char
   614  0713  2FF6               	goto	l163
   615  0714                     l1235:	
   616                           ;main.c: 39: case '6' : key = '6' ; Entry_Mode_Set(); LCD_Write_Char(key); break ;
   617                           
   618  0714  3036               	movlw	54
   619  0715  00FA               	movwf	??_main
   620  0716  087A               	movf	??_main,w
   621  0717  00FD               	movwf	_key
   622  0718  120A  118A  2495  120A  118A  	fcall	_Entry_Mode_Set
   623  071D  087D               	movf	_key,w
   624  071E  120A  118A  24FD  120A  118A  	fcall	_LCD_Write_Char
   625  0723  2FF6               	goto	l163
   626  0724                     l1241:	
   627                           ;main.c: 40: case '7' : key = '7' ; Entry_Mode_Set(); LCD_Write_Char(key); break ;
   628                           
   629  0724  3037               	movlw	55
   630  0725  00FA               	movwf	??_main
   631  0726  087A               	movf	??_main,w
   632  0727  00FD               	movwf	_key
   633  0728  120A  118A  2495  120A  118A  	fcall	_Entry_Mode_Set
   634  072D  087D               	movf	_key,w
   635  072E  120A  118A  24FD  120A  118A  	fcall	_LCD_Write_Char
   636  0733  2FF6               	goto	l163
   637  0734                     l1247:	
   638                           ;main.c: 41: case '8' : key = '8' ; Entry_Mode_Set(); LCD_Write_Char(key); break ;
   639                           
   640  0734  3038               	movlw	56
   641  0735  00FA               	movwf	??_main
   642  0736  087A               	movf	??_main,w
   643  0737  00FD               	movwf	_key
   644  0738  120A  118A  2495  120A  118A  	fcall	_Entry_Mode_Set
   645  073D  087D               	movf	_key,w
   646  073E  120A  118A  24FD  120A  118A  	fcall	_LCD_Write_Char
   647  0743  2FF6               	goto	l163
   648  0744                     l1253:	
   649                           ;main.c: 42: case '9' : key = '9' ; Entry_Mode_Set(); LCD_Write_Char(key); break ;
   650                           
   651  0744  3039               	movlw	57
   652  0745  00FA               	movwf	??_main
   653  0746  087A               	movf	??_main,w
   654  0747  00FD               	movwf	_key
   655  0748  120A  118A  2495  120A  118A  	fcall	_Entry_Mode_Set
   656  074D  087D               	movf	_key,w
   657  074E  120A  118A  24FD  120A  118A  	fcall	_LCD_Write_Char
   658  0753  2FF6               	goto	l163
   659  0754                     l1259:	
   660                           ;main.c: 43: case '0' : key = '0' ; Entry_Mode_Set(); LCD_Write_Char(key); break ;
   661                           
   662  0754  3030               	movlw	48
   663  0755  00FA               	movwf	??_main
   664  0756  087A               	movf	??_main,w
   665  0757  00FD               	movwf	_key
   666  0758  120A  118A  2495  120A  118A  	fcall	_Entry_Mode_Set
   667  075D  087D               	movf	_key,w
   668  075E  120A  118A  24FD  120A  118A  	fcall	_LCD_Write_Char
   669  0763  2FF6               	goto	l163
   670  0764                     l1265:	
   671                           ;main.c: 44: case 'A' : key = 'A' ; Entry_Mode_Set(); LCD_Write_Char(key); break ;
   672                           
   673  0764  3041               	movlw	65
   674  0765  00FA               	movwf	??_main
   675  0766  087A               	movf	??_main,w
   676  0767  00FD               	movwf	_key
   677  0768  120A  118A  2495  120A  118A  	fcall	_Entry_Mode_Set
   678  076D  087D               	movf	_key,w
   679  076E  120A  118A  24FD  120A  118A  	fcall	_LCD_Write_Char
   680  0773  2FF6               	goto	l163
   681  0774                     l1271:	
   682                           ;main.c: 45: case 'B' : key = 'B' ; Entry_Mode_Set(); LCD_Write_Char(key); break ;
   683                           
   684  0774  3042               	movlw	66
   685  0775  00FA               	movwf	??_main
   686  0776  087A               	movf	??_main,w
   687  0777  00FD               	movwf	_key
   688  0778  120A  118A  2495  120A  118A  	fcall	_Entry_Mode_Set
   689  077D  087D               	movf	_key,w
   690  077E  120A  118A  24FD  120A  118A  	fcall	_LCD_Write_Char
   691  0783  2FF6               	goto	l163
   692  0784                     l1277:	
   693                           ;main.c: 46: case 'C' : key = 'C' ; Entry_Mode_Set(); LCD_Write_Char(key); break ;
   694                           
   695  0784  3043               	movlw	67
   696  0785  00FA               	movwf	??_main
   697  0786  087A               	movf	??_main,w
   698  0787  00FD               	movwf	_key
   699  0788  120A  118A  2495  120A  118A  	fcall	_Entry_Mode_Set
   700  078D  087D               	movf	_key,w
   701  078E  120A  118A  24FD  120A  118A  	fcall	_LCD_Write_Char
   702  0793  2FF6               	goto	l163
   703  0794                     l1283:	
   704                           ;main.c: 47: case 'D' : key = 'D' ; Entry_Mode_Set(); LCD_Write_Char(key); break ;
   705                           
   706  0794  3044               	movlw	68
   707  0795  00FA               	movwf	??_main
   708  0796  087A               	movf	??_main,w
   709  0797  00FD               	movwf	_key
   710  0798  120A  118A  2495  120A  118A  	fcall	_Entry_Mode_Set
   711  079D  087D               	movf	_key,w
   712  079E  120A  118A  24FD  120A  118A  	fcall	_LCD_Write_Char
   713  07A3  2FF6               	goto	l163
   714  07A4                     l1289:	
   715                           ;main.c: 48: case '*' : key = '*' ; Entry_Mode_Set(); LCD_Write_Char(key); break ;
   716                           
   717  07A4  302A               	movlw	42
   718  07A5  00FA               	movwf	??_main
   719  07A6  087A               	movf	??_main,w
   720  07A7  00FD               	movwf	_key
   721  07A8  120A  118A  2495  120A  118A  	fcall	_Entry_Mode_Set
   722  07AD  087D               	movf	_key,w
   723  07AE  120A  118A  24FD  120A  118A  	fcall	_LCD_Write_Char
   724  07B3  2FF6               	goto	l163
   725  07B4                     l1295:	
   726                           ;main.c: 49: case '#' : key = '#' ; Entry_Mode_Set(); LCD_Write_Char(key); break ;
   727                           
   728  07B4  3023               	movlw	35
   729  07B5  00FA               	movwf	??_main
   730  07B6  087A               	movf	??_main,w
   731  07B7  00FD               	movwf	_key
   732  07B8  120A  118A  2495  120A  118A  	fcall	_Entry_Mode_Set
   733  07BD  087D               	movf	_key,w
   734  07BE  120A  118A  24FD  120A  118A  	fcall	_LCD_Write_Char
   735                           
   736                           ;main.c: 51: }
   737  07C3  2FF6               	goto	l163
   738  07C4                     l1303:	
   739  07C4  087D               	movf	_key,w
   740                           
   741                           ; Switch size 1, requested type "space"
   742                           ; Number of cases is 16, Range of values is 35 to 68
   743                           ; switch strategies available:
   744                           ; Name         Instructions Cycles
   745                           ; simple_byte           49    25 (average)
   746                           ; direct_byte          113    11 (fixed)
   747                           ; jumptable            263     9 (fixed)
   748                           ;	Chosen strategy is simple_byte
   749  07C5  3A23               	xorlw	35	; case 35
   750  07C6  1903               	skipnz
   751  07C7  2FB4               	goto	l1295
   752  07C8  3A09               	xorlw	9	; case 42
   753  07C9  1903               	skipnz
   754  07CA  2FA4               	goto	l1289
   755  07CB  3A1A               	xorlw	26	; case 48
   756  07CC  1903               	skipnz
   757  07CD  2F54               	goto	l1259
   758  07CE  3A01               	xorlw	1	; case 49
   759  07CF  1903               	skipnz
   760  07D0  2EC9               	goto	l1207
   761  07D1  3A03               	xorlw	3	; case 50
   762  07D2  1903               	skipnz
   763  07D3  2ED4               	goto	l1211
   764  07D4  3A01               	xorlw	1	; case 51
   765  07D5  1903               	skipnz
   766  07D6  2EE4               	goto	l1217
   767  07D7  3A07               	xorlw	7	; case 52
   768  07D8  1903               	skipnz
   769  07D9  2EF4               	goto	l1223
   770  07DA  3A01               	xorlw	1	; case 53
   771  07DB  1903               	skipnz
   772  07DC  2F04               	goto	l1229
   773  07DD  3A03               	xorlw	3	; case 54
   774  07DE  1903               	skipnz
   775  07DF  2F14               	goto	l1235
   776  07E0  3A01               	xorlw	1	; case 55
   777  07E1  1903               	skipnz
   778  07E2  2F24               	goto	l1241
   779  07E3  3A0F               	xorlw	15	; case 56
   780  07E4  1903               	skipnz
   781  07E5  2F34               	goto	l1247
   782  07E6  3A01               	xorlw	1	; case 57
   783  07E7  1903               	skipnz
   784  07E8  2F44               	goto	l1253
   785  07E9  3A78               	xorlw	120	; case 65
   786  07EA  1903               	skipnz
   787  07EB  2F64               	goto	l1265
   788  07EC  3A03               	xorlw	3	; case 66
   789  07ED  1903               	skipnz
   790  07EE  2F74               	goto	l1271
   791  07EF  3A01               	xorlw	1	; case 67
   792  07F0  1903               	skipnz
   793  07F1  2F84               	goto	l1277
   794  07F2  3A07               	xorlw	7	; case 68
   795  07F3  1903               	skipnz
   796  07F4  2F94               	goto	l1283
   797  07F5  2FF6               	goto	l162
   798  07F6                     l162:	
   799                           ;main.c: 53: while (1) ;
   800                           
   801  07F6                     l163:	
   802  07F6  2FF6               	goto	l163
   803  07F7                     __end_of_main:	
   804                           ;main.c: 55: return;
   805                           
   806                           
   807                           	psect	text1
   808  0540                     __ptext1:	
   809 ;; *************** function _LCD_set_cursor *****************
   810 ;; Defined at:
   811 ;;		line 77 in file "LCD.c"
   812 ;; Parameters:    Size  Location     Type
   813 ;;  r               1    wreg     unsigned char 
   814 ;;  c               1    3[COMMON] unsigned char 
   815 ;; Auto vars:     Size  Location     Type
   816 ;;  r               1    6[COMMON] unsigned char 
   817 ;;  temp            1    9[COMMON] unsigned char 
   818 ;;  low4            1    8[COMMON] unsigned char 
   819 ;;  high4           1    7[COMMON] unsigned char 
   820 ;; Return value:  Size  Location     Type
   821 ;;                  1    wreg      void 
   822 ;; Registers used:
   823 ;;		wreg, status,2, status,0, pclath, cstack
   824 ;; Tracked objects:
   825 ;;		On entry : 0/0
   826 ;;		On exit  : 0/0
   827 ;;		Unchanged: 0/0
   828 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   829 ;;      Params:         1       0       0       0       0
   830 ;;      Locals:         4       0       0       0       0
   831 ;;      Temps:          2       0       0       0       0
   832 ;;      Totals:         7       0       0       0       0
   833 ;;Total ram usage:        7 bytes
   834 ;; Hardware stack levels used:    1
   835 ;; Hardware stack levels required when called:    2
   836 ;; This function calls:
   837 ;;		_LCD_Command
   838 ;; This function is called by:
   839 ;;		_main
   840 ;; This function uses a non-reentrant model
   841 ;;
   842                           
   843                           
   844                           ;psect for function _LCD_set_cursor
   845  0540                     _LCD_set_cursor:	
   846                           
   847                           ;incstack = 0
   848                           ; Regs used in _LCD_set_cursor: [wreg+status,2+status,0+pclath+cstack]
   849                           ;LCD_set_cursor@r stored from wreg
   850  0540  00F6               	movwf	LCD_set_cursor@r
   851                           
   852                           ;LCD.c: 79: unsigned char temp , high4 , low4 ;
   853                           ;LCD.c: 80: if (r==1) {
   854  0541  0376               	decf	LCD_set_cursor@r,w
   855  0542  1D03               	btfss	3,2
   856  0543  2D66               	goto	l1169
   857                           
   858                           ;LCD.c: 81: temp = 0x80 +c-1 ;
   859  0544  0873               	movf	LCD_set_cursor@c,w
   860  0545  3E7F               	addlw	127
   861  0546  00F4               	movwf	??_LCD_set_cursor
   862  0547  0874               	movf	??_LCD_set_cursor,w
   863  0548  00F9               	movwf	LCD_set_cursor@temp
   864                           
   865                           ;LCD.c: 82: high4 = temp >> 4 ;
   866  0549  0879               	movf	LCD_set_cursor@temp,w
   867  054A  00F4               	movwf	??_LCD_set_cursor
   868  054B  3004               	movlw	4
   869  054C                     u845:	
   870  054C  1003               	clrc
   871  054D  0CF4               	rrf	??_LCD_set_cursor,f
   872  054E  3EFF               	addlw	-1
   873  054F  1D03               	skipz
   874  0550  2D4C               	goto	u845
   875  0551  0874               	movf	??_LCD_set_cursor,w
   876  0552  00F5               	movwf	??_LCD_set_cursor+1
   877  0553  0875               	movf	??_LCD_set_cursor+1,w
   878  0554  00F7               	movwf	LCD_set_cursor@high4
   879                           
   880                           ;LCD.c: 83: low4 = temp & 0x0F ;
   881  0555  0879               	movf	LCD_set_cursor@temp,w
   882  0556  390F               	andlw	15
   883  0557  00F4               	movwf	??_LCD_set_cursor
   884  0558  0874               	movf	??_LCD_set_cursor,w
   885  0559  00F8               	movwf	LCD_set_cursor@low4
   886                           
   887                           ;LCD.c: 84: LCD_Command(high4);
   888  055A  0877               	movf	LCD_set_cursor@high4,w
   889  055B  120A  118A  24AB  120A  118A  	fcall	_LCD_Command
   890                           
   891                           ;LCD.c: 85: LCD_Command(low4) ;
   892  0560  0878               	movf	LCD_set_cursor@low4,w
   893  0561  120A  118A  24AB  120A  118A  	fcall	_LCD_Command
   894  0566                     l1169:	
   895                           
   896                           ;LCD.c: 87: }
   897                           ;LCD.c: 88: if (r==2) {
   898  0566  3002               	movlw	2
   899  0567  0676               	xorwf	LCD_set_cursor@r,w
   900  0568  1D03               	btfss	3,2
   901  0569  0008               	return
   902                           
   903                           ;LCD.c: 89: temp = 0xC0 +c-1 ;
   904  056A  0873               	movf	LCD_set_cursor@c,w
   905  056B  3EBF               	addlw	191
   906  056C  00F4               	movwf	??_LCD_set_cursor
   907  056D  0874               	movf	??_LCD_set_cursor,w
   908  056E  00F9               	movwf	LCD_set_cursor@temp
   909                           
   910                           ;LCD.c: 90: high4 = temp >> 4 ;
   911  056F  0879               	movf	LCD_set_cursor@temp,w
   912  0570  00F4               	movwf	??_LCD_set_cursor
   913  0571  3004               	movlw	4
   914  0572                     u865:	
   915  0572  1003               	clrc
   916  0573  0CF4               	rrf	??_LCD_set_cursor,f
   917  0574  3EFF               	addlw	-1
   918  0575  1D03               	skipz
   919  0576  2D72               	goto	u865
   920  0577  0874               	movf	??_LCD_set_cursor,w
   921  0578  00F5               	movwf	??_LCD_set_cursor+1
   922  0579  0875               	movf	??_LCD_set_cursor+1,w
   923  057A  00F7               	movwf	LCD_set_cursor@high4
   924                           
   925                           ;LCD.c: 91: low4 = temp & 0x0F ;
   926  057B  0879               	movf	LCD_set_cursor@temp,w
   927  057C  390F               	andlw	15
   928  057D  00F4               	movwf	??_LCD_set_cursor
   929  057E  0874               	movf	??_LCD_set_cursor,w
   930  057F  00F8               	movwf	LCD_set_cursor@low4
   931                           
   932                           ;LCD.c: 92: LCD_Command(high4);
   933  0580  0877               	movf	LCD_set_cursor@high4,w
   934  0581  120A  118A  24AB  120A  118A  	fcall	_LCD_Command
   935                           
   936                           ;LCD.c: 93: LCD_Command(low4) ;
   937  0586  0878               	movf	LCD_set_cursor@low4,w
   938  0587  120A  118A  24AB   	fcall	_LCD_Command
   939  058A  0008               	return
   940  058B                     __end_of_LCD_set_cursor:	
   941                           
   942                           	psect	text2
   943  04DB                     __ptext2:	
   944 ;; *************** function _LCD_Write_String *****************
   945 ;; Defined at:
   946 ;;		line 71 in file "LCD.c"
   947 ;; Parameters:    Size  Location     Type
   948 ;;  Str             1    wreg     PTR unsigned char 
   949 ;;		 -> STR_2(9), STR_1(10), 
   950 ;; Auto vars:     Size  Location     Type
   951 ;;  Str             1    7[COMMON] PTR unsigned char 
   952 ;;		 -> STR_2(9), STR_1(10), 
   953 ;;  i               2    5[COMMON] int 
   954 ;; Return value:  Size  Location     Type
   955 ;;                  1    wreg      void 
   956 ;; Registers used:
   957 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   958 ;; Tracked objects:
   959 ;;		On entry : 0/0
   960 ;;		On exit  : 0/0
   961 ;;		Unchanged: 0/0
   962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   963 ;;      Params:         0       0       0       0       0
   964 ;;      Locals:         3       0       0       0       0
   965 ;;      Temps:          0       0       0       0       0
   966 ;;      Totals:         3       0       0       0       0
   967 ;;Total ram usage:        3 bytes
   968 ;; Hardware stack levels used:    1
   969 ;; Hardware stack levels required when called:    2
   970 ;; This function calls:
   971 ;;		_LCD_Write_Char
   972 ;; This function is called by:
   973 ;;		_main
   974 ;; This function uses a non-reentrant model
   975 ;;
   976                           
   977                           
   978                           ;psect for function _LCD_Write_String
   979  04DB                     _LCD_Write_String:	
   980                           
   981                           ;incstack = 0
   982                           ; Regs used in _LCD_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   983                           ;LCD_Write_String@Str stored from wreg
   984  04DB  00F7               	movwf	LCD_Write_String@Str
   985                           
   986                           ;LCD.c: 72: int i ;
   987                           ;LCD.c: 73: for (i = 0 ; Str[i]!='\0'; i++ ) {
   988  04DC  01F5               	clrf	LCD_Write_String@i
   989  04DD  01F6               	clrf	LCD_Write_String@i+1
   990  04DE                     l1157:	
   991  04DE  0875               	movf	LCD_Write_String@i,w
   992  04DF  0777               	addwf	LCD_Write_String@Str,w
   993  04E0  0084               	movwf	4
   994  04E1  120A  118A  2003  120A  118A  	fcall	stringdir
   995  04E6  3A00               	xorlw	0
   996  04E7  1903               	btfsc	3,2
   997  04E8  0008               	return
   998                           
   999                           ;LCD.c: 74: LCD_Write_Char(Str[i]);
  1000  04E9  0875               	movf	LCD_Write_String@i,w
  1001  04EA  0777               	addwf	LCD_Write_String@Str,w
  1002  04EB  0084               	movwf	4
  1003  04EC  120A  118A  2003  120A  118A  	fcall	stringdir
  1004  04F1  120A  118A  24FD  120A  118A  	fcall	_LCD_Write_Char
  1005  04F6  3001               	movlw	1
  1006  04F7  07F5               	addwf	LCD_Write_String@i,f
  1007  04F8  1803               	skipnc
  1008  04F9  0AF6               	incf	LCD_Write_String@i+1,f
  1009  04FA  3000               	movlw	0
  1010  04FB  07F6               	addwf	LCD_Write_String@i+1,f
  1011  04FC  2CDE               	goto	l1157
  1012  04FD                     __end_of_LCD_Write_String:	
  1013                           
  1014                           	psect	text3
  1015  04FD                     __ptext3:	
  1016 ;; *************** function _LCD_Write_Char *****************
  1017 ;; Defined at:
  1018 ;;		line 54 in file "LCD.c"
  1019 ;; Parameters:    Size  Location     Type
  1020 ;;  Data            1    wreg     unsigned char 
  1021 ;; Auto vars:     Size  Location     Type
  1022 ;;  Data            1    4[COMMON] unsigned char 
  1023 ;;  High4           1    3[COMMON] unsigned char 
  1024 ;;  Low4            1    2[COMMON] unsigned char 
  1025 ;; Return value:  Size  Location     Type
  1026 ;;                  1    wreg      void 
  1027 ;; Registers used:
  1028 ;;		wreg, status,2, status,0, pclath, cstack
  1029 ;; Tracked objects:
  1030 ;;		On entry : 0/0
  1031 ;;		On exit  : 0/0
  1032 ;;		Unchanged: 0/0
  1033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1034 ;;      Params:         0       0       0       0       0
  1035 ;;      Locals:         3       0       0       0       0
  1036 ;;      Temps:          1       0       0       0       0
  1037 ;;      Totals:         4       0       0       0       0
  1038 ;;Total ram usage:        4 bytes
  1039 ;; Hardware stack levels used:    1
  1040 ;; Hardware stack levels required when called:    1
  1041 ;; This function calls:
  1042 ;;		_LCD_Data
  1043 ;; This function is called by:
  1044 ;;		_LCD_Write_String
  1045 ;;		_main
  1046 ;; This function uses a non-reentrant model
  1047 ;;
  1048                           
  1049                           
  1050                           ;psect for function _LCD_Write_Char
  1051  04FD                     _LCD_Write_Char:	
  1052                           
  1053                           ;incstack = 0
  1054                           ; Regs used in _LCD_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  1055                           ;LCD_Write_Char@Data stored from wreg
  1056  04FD  00F4               	movwf	LCD_Write_Char@Data
  1057                           
  1058                           ;LCD.c: 56: char Low4 , High4 ;
  1059                           ;LCD.c: 57: Low4 = Data & 0x0F ;
  1060  04FE  0874               	movf	LCD_Write_Char@Data,w
  1061  04FF  390F               	andlw	15
  1062  0500  00F1               	movwf	??_LCD_Write_Char
  1063  0501  0871               	movf	??_LCD_Write_Char,w
  1064  0502  00F2               	movwf	LCD_Write_Char@Low4
  1065                           
  1066                           ;LCD.c: 58: High4 = Data & 0xF0 ;
  1067  0503  0874               	movf	LCD_Write_Char@Data,w
  1068  0504  39F0               	andlw	240
  1069  0505  00F1               	movwf	??_LCD_Write_Char
  1070  0506  0871               	movf	??_LCD_Write_Char,w
  1071  0507  00F3               	movwf	LCD_Write_Char@High4
  1072                           
  1073                           ;LCD.c: 59: RB5 = 1 ;
  1074  0508  1283               	bcf	3,5	;RP0=0, select bank0
  1075  0509  1303               	bcf	3,6	;RP1=0, select bank0
  1076  050A  1686               	bsf	6,5	;volatile
  1077                           
  1078                           ;LCD.c: 60: LCD_Data(High4>>4);
  1079  050B  0873               	movf	LCD_Write_Char@High4,w
  1080  050C  00F1               	movwf	??_LCD_Write_Char
  1081  050D  3004               	movlw	4
  1082  050E                     u485:	
  1083  050E  1003               	clrc
  1084  050F  0CF1               	rrf	??_LCD_Write_Char,f
  1085  0510  3EFF               	addlw	-1
  1086  0511  1D03               	skipz
  1087  0512  2D0E               	goto	u485
  1088  0513  0871               	movf	??_LCD_Write_Char,w
  1089  0514  120A  118A  24C1  120A  118A  	fcall	_LCD_Data
  1090                           
  1091                           ;LCD.c: 61: RB4 = 1 ;
  1092  0519  1283               	bcf	3,5	;RP0=0, select bank0
  1093  051A  1303               	bcf	3,6	;RP1=0, select bank0
  1094  051B  1606               	bsf	6,4	;volatile
  1095                           
  1096                           ;LCD.c: 62: _delay((unsigned long)((500)*(4000000/4000000.0)));
  1097  051C  30A6               	movlw	166
  1098  051D  00F1               	movwf	??_LCD_Write_Char
  1099  051E                     u887:	
  1100  051E  0BF1               	decfsz	??_LCD_Write_Char,f
  1101  051F  2D1E               	goto	u887
  1102  0520  0000               	nop
  1103                           
  1104                           ;LCD.c: 63: RB4 = 0 ;
  1105  0521  1283               	bcf	3,5	;RP0=0, select bank0
  1106  0522  1303               	bcf	3,6	;RP1=0, select bank0
  1107  0523  1206               	bcf	6,4	;volatile
  1108                           
  1109                           ;LCD.c: 64: _delay((unsigned long)((500)*(4000000/4000000.0)));
  1110  0524  30A6               	movlw	166
  1111  0525  00F1               	movwf	??_LCD_Write_Char
  1112  0526                     u897:	
  1113  0526  0BF1               	decfsz	??_LCD_Write_Char,f
  1114  0527  2D26               	goto	u897
  1115  0528  0000               	nop
  1116                           
  1117                           ;LCD.c: 65: LCD_Data(Low4);
  1118  0529  0872               	movf	LCD_Write_Char@Low4,w
  1119  052A  120A  118A  24C1  120A  118A  	fcall	_LCD_Data
  1120                           
  1121                           ;LCD.c: 66: RB4 = 1 ;
  1122  052F  1283               	bcf	3,5	;RP0=0, select bank0
  1123  0530  1303               	bcf	3,6	;RP1=0, select bank0
  1124  0531  1606               	bsf	6,4	;volatile
  1125                           
  1126                           ;LCD.c: 67: _delay((unsigned long)((500)*(4000000/4000000.0)));
  1127  0532  30A6               	movlw	166
  1128  0533  00F1               	movwf	??_LCD_Write_Char
  1129  0534                     u907:	
  1130  0534  0BF1               	decfsz	??_LCD_Write_Char,f
  1131  0535  2D34               	goto	u907
  1132  0536  0000               	nop
  1133                           
  1134                           ;LCD.c: 68: RB4 = 0 ;
  1135  0537  1283               	bcf	3,5	;RP0=0, select bank0
  1136  0538  1303               	bcf	3,6	;RP1=0, select bank0
  1137  0539  1206               	bcf	6,4	;volatile
  1138                           
  1139                           ;LCD.c: 69: _delay((unsigned long)((500)*(4000000/4000000.0)));
  1140  053A  30A6               	movlw	166
  1141  053B  00F1               	movwf	??_LCD_Write_Char
  1142  053C                     u917:	
  1143  053C  0BF1               	decfsz	??_LCD_Write_Char,f
  1144  053D  2D3C               	goto	u917
  1145  053E  0000               	nop
  1146  053F  0008               	return
  1147  0540                     __end_of_LCD_Write_Char:	
  1148                           
  1149                           	psect	text4
  1150  058B                     __ptext4:	
  1151 ;; *************** function _LCD_Init *****************
  1152 ;; Defined at:
  1153 ;;		line 3 in file "LCD.c"
  1154 ;; Parameters:    Size  Location     Type
  1155 ;;		None
  1156 ;; Auto vars:     Size  Location     Type
  1157 ;;		None
  1158 ;; Return value:  Size  Location     Type
  1159 ;;                  1    wreg      void 
  1160 ;; Registers used:
  1161 ;;		wreg, status,2, status,0, pclath, cstack
  1162 ;; Tracked objects:
  1163 ;;		On entry : 0/0
  1164 ;;		On exit  : 0/0
  1165 ;;		Unchanged: 0/0
  1166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1167 ;;      Params:         0       0       0       0       0
  1168 ;;      Locals:         0       0       0       0       0
  1169 ;;      Temps:          2       0       0       0       0
  1170 ;;      Totals:         2       0       0       0       0
  1171 ;;Total ram usage:        2 bytes
  1172 ;; Hardware stack levels used:    1
  1173 ;; Hardware stack levels required when called:    2
  1174 ;; This function calls:
  1175 ;;		_LCD_Command
  1176 ;;		_LCD_Data
  1177 ;; This function is called by:
  1178 ;;		_main
  1179 ;; This function uses a non-reentrant model
  1180 ;;
  1181                           
  1182                           
  1183                           ;psect for function _LCD_Init
  1184  058B                     _LCD_Init:	
  1185                           
  1186                           ;LCD.c: 5: TRISB = 0x00 ;
  1187                           
  1188                           ;incstack = 0
  1189                           ; Regs used in _LCD_Init: [wreg+status,2+status,0+pclath+cstack]
  1190  058B  1683               	bsf	3,5	;RP0=1, select bank1
  1191  058C  1303               	bcf	3,6	;RP1=0, select bank1
  1192  058D  0186               	clrf	6	;volatile
  1193                           
  1194                           ;LCD.c: 6: TRISB4 = 0 ;
  1195  058E  1206               	bcf	6,4	;volatile
  1196                           
  1197                           ;LCD.c: 7: TRISB5 =0 ;
  1198  058F  1286               	bcf	6,5	;volatile
  1199                           
  1200                           ;LCD.c: 9: LCD_Data(0x00);
  1201  0590  3000               	movlw	0
  1202  0591  120A  118A  24C1  120A  118A  	fcall	_LCD_Data
  1203                           
  1204                           ;LCD.c: 10: _delay((unsigned long)((30)*(4000000/4000.0)));
  1205  0596  3027               	movlw	39
  1206  0597  00F4               	movwf	??_LCD_Init+1
  1207  0598  30F5               	movlw	245
  1208  0599  00F3               	movwf	??_LCD_Init
  1209  059A                     u927:	
  1210  059A  0BF3               	decfsz	??_LCD_Init,f
  1211  059B  2D9A               	goto	u927
  1212  059C  0BF4               	decfsz	??_LCD_Init+1,f
  1213  059D  2D9A               	goto	u927
  1214                           
  1215                           ;LCD.c: 11: _delay((unsigned long)((500)*(4000000/4000000.0)));
  1216  059E  30A6               	movlw	166
  1217  059F  00F3               	movwf	??_LCD_Init
  1218  05A0                     u937:	
  1219  05A0  0BF3               	decfsz	??_LCD_Init,f
  1220  05A1  2DA0               	goto	u937
  1221  05A2  0000               	nop
  1222                           
  1223                           ;LCD.c: 12: LCD_Command(0x03);
  1224  05A3  3003               	movlw	3
  1225  05A4  120A  118A  24AB  120A  118A  	fcall	_LCD_Command
  1226                           
  1227                           ;LCD.c: 13: _delay((unsigned long)((5)*(4000000/4000.0)));
  1228  05A9  3007               	movlw	7
  1229  05AA  00F4               	movwf	??_LCD_Init+1
  1230  05AB  307D               	movlw	125
  1231  05AC  00F3               	movwf	??_LCD_Init
  1232  05AD                     u947:	
  1233  05AD  0BF3               	decfsz	??_LCD_Init,f
  1234  05AE  2DAD               	goto	u947
  1235  05AF  0BF4               	decfsz	??_LCD_Init+1,f
  1236  05B0  2DAD               	goto	u947
  1237                           
  1238                           ;LCD.c: 14: LCD_Command(0x03);
  1239  05B1  3003               	movlw	3
  1240  05B2  120A  118A  24AB  120A  118A  	fcall	_LCD_Command
  1241                           
  1242                           ;LCD.c: 15: _delay((unsigned long)((120)*(4000000/4000000.0))) ;
  1243  05B7  3027               	movlw	39
  1244  05B8  00F3               	movwf	??_LCD_Init
  1245  05B9                     u957:	
  1246  05B9  0BF3               	decfsz	??_LCD_Init,f
  1247  05BA  2DB9               	goto	u957
  1248  05BB  2DBC               	nop2
  1249                           
  1250                           ;LCD.c: 16: LCD_Command(0x03);
  1251  05BC  3003               	movlw	3
  1252  05BD  120A  118A  24AB  120A  118A  	fcall	_LCD_Command
  1253                           
  1254                           ;LCD.c: 17: LCD_Command(0x02);
  1255  05C2  3002               	movlw	2
  1256  05C3  120A  118A  24AB  120A  118A  	fcall	_LCD_Command
  1257                           
  1258                           ;LCD.c: 18: LCD_Command(0x02);
  1259  05C8  3002               	movlw	2
  1260  05C9  120A  118A  24AB  120A  118A  	fcall	_LCD_Command
  1261                           
  1262                           ;LCD.c: 19: LCD_Command(0x08);
  1263  05CE  3008               	movlw	8
  1264  05CF  120A  118A  24AB  120A  118A  	fcall	_LCD_Command
  1265                           
  1266                           ;LCD.c: 20: LCD_Command(0x00);
  1267  05D4  3000               	movlw	0
  1268  05D5  120A  118A  24AB  120A  118A  	fcall	_LCD_Command
  1269                           
  1270                           ;LCD.c: 21: LCD_Command(0x0C);
  1271  05DA  300C               	movlw	12
  1272  05DB  120A  118A  24AB  120A  118A  	fcall	_LCD_Command
  1273                           
  1274                           ;LCD.c: 22: LCD_Command(0x00);
  1275  05E0  3000               	movlw	0
  1276  05E1  120A  118A  24AB  120A  118A  	fcall	_LCD_Command
  1277                           
  1278                           ;LCD.c: 23: LCD_Command(0x06);
  1279  05E6  3006               	movlw	6
  1280  05E7  120A  118A  24AB   	fcall	_LCD_Command
  1281  05EA  0008               	return
  1282  05EB                     __end_of_LCD_Init:	
  1283                           
  1284                           	psect	text5
  1285  04A0                     __ptext5:	
  1286 ;; *************** function _LCD_Clear *****************
  1287 ;; Defined at:
  1288 ;;		line 98 in file "LCD.c"
  1289 ;; Parameters:    Size  Location     Type
  1290 ;;		None
  1291 ;; Auto vars:     Size  Location     Type
  1292 ;;		None
  1293 ;; Return value:  Size  Location     Type
  1294 ;;                  1    wreg      void 
  1295 ;; Registers used:
  1296 ;;		wreg, status,2, status,0, pclath, cstack
  1297 ;; Tracked objects:
  1298 ;;		On entry : 0/0
  1299 ;;		On exit  : 0/0
  1300 ;;		Unchanged: 0/0
  1301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1302 ;;      Params:         0       0       0       0       0
  1303 ;;      Locals:         0       0       0       0       0
  1304 ;;      Temps:          0       0       0       0       0
  1305 ;;      Totals:         0       0       0       0       0
  1306 ;;Total ram usage:        0 bytes
  1307 ;; Hardware stack levels used:    1
  1308 ;; Hardware stack levels required when called:    2
  1309 ;; This function calls:
  1310 ;;		_LCD_Command
  1311 ;; This function is called by:
  1312 ;;		_main
  1313 ;; This function uses a non-reentrant model
  1314 ;;
  1315                           
  1316                           
  1317                           ;psect for function _LCD_Clear
  1318  04A0                     _LCD_Clear:	
  1319                           
  1320                           ;LCD.c: 99: LCD_Command(0);
  1321                           
  1322                           ;incstack = 0
  1323                           ; Regs used in _LCD_Clear: [wreg+status,2+status,0+pclath+cstack]
  1324  04A0  3000               	movlw	0
  1325  04A1  120A  118A  24AB  120A  118A  	fcall	_LCD_Command
  1326                           
  1327                           ;LCD.c: 100: LCD_Command(1);
  1328  04A6  3001               	movlw	1
  1329  04A7  120A  118A  24AB   	fcall	_LCD_Command
  1330  04AA  0008               	return
  1331  04AB                     __end_of_LCD_Clear:	
  1332                           
  1333                           	psect	text6
  1334  05EB                     __ptext6:	
  1335 ;; *************** function _Keybad_Scanner *****************
  1336 ;; Defined at:
  1337 ;;		line 11 in file "Keybad.c"
  1338 ;; Parameters:    Size  Location     Type
  1339 ;;		None
  1340 ;; Auto vars:     Size  Location     Type
  1341 ;;		None
  1342 ;; Return value:  Size  Location     Type
  1343 ;;                  1    wreg      unsigned char 
  1344 ;; Registers used:
  1345 ;;		wreg
  1346 ;; Tracked objects:
  1347 ;;		On entry : 0/0
  1348 ;;		On exit  : 0/0
  1349 ;;		Unchanged: 0/0
  1350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1351 ;;      Params:         0       0       0       0       0
  1352 ;;      Locals:         0       0       0       0       0
  1353 ;;      Temps:          2       0       0       0       0
  1354 ;;      Totals:         2       0       0       0       0
  1355 ;;Total ram usage:        2 bytes
  1356 ;; Hardware stack levels used:    1
  1357 ;; This function calls:
  1358 ;;		Nothing
  1359 ;; This function is called by:
  1360 ;;		_main
  1361 ;; This function uses a non-reentrant model
  1362 ;;
  1363                           
  1364                           
  1365                           ;psect for function _Keybad_Scanner
  1366  05EB                     _Keybad_Scanner:	
  1367                           
  1368                           ;Keybad.c: 12: PORTD =0x01 ;
  1369                           
  1370                           ;incstack = 0
  1371                           ; Regs used in _Keybad_Scanner: [wreg]
  1372  05EB  3001               	movlw	1
  1373  05EC  1283               	bcf	3,5	;RP0=0, select bank0
  1374  05ED  1303               	bcf	3,6	;RP1=0, select bank0
  1375  05EE  0088               	movwf	8	;volatile
  1376                           
  1377                           ;Keybad.c: 13: if ((RD0)&&(RD4)){
  1378  05EF  1808               	btfsc	8,0	;volatile
  1379  05F0  1E08               	btfss	8,4	;volatile
  1380  05F1  2E03               	goto	l1023
  1381                           
  1382                           ;Keybad.c: 14: _delay((unsigned long)((100)*(4000000/4000.0)));
  1383  05F2  3082               	movlw	130
  1384  05F3  00F1               	movwf	??_Keybad_Scanner+1
  1385  05F4  30DD               	movlw	221
  1386  05F5  00F0               	movwf	??_Keybad_Scanner
  1387  05F6                     u967:	
  1388  05F6  0BF0               	decfsz	??_Keybad_Scanner,f
  1389  05F7  2DF6               	goto	u967
  1390  05F8  0BF1               	decfsz	??_Keybad_Scanner+1,f
  1391  05F9  2DF6               	goto	u967
  1392  05FA  2DFB               	nop2
  1393  05FB                     l31:	
  1394                           ;Keybad.c: 15: while (RD4);
  1395                           
  1396  05FB  1283               	bcf	3,5	;RP0=0, select bank0
  1397  05FC  1303               	bcf	3,6	;RP1=0, select bank0
  1398  05FD  1A08               	btfsc	8,4	;volatile
  1399  05FE  2DFB               	goto	l31
  1400                           
  1401                           ;Keybad.c: 16: key = '1';
  1402  05FF  3031               	movlw	49
  1403  0600  00F0               	movwf	??_Keybad_Scanner
  1404  0601  0870               	movf	??_Keybad_Scanner,w
  1405  0602  00FD               	movwf	_key
  1406  0603                     l1023:	
  1407                           
  1408                           ;Keybad.c: 17: }
  1409                           ;Keybad.c: 19: if ((RD0)&&(RD5))
  1410  0603  1808               	btfsc	8,0	;volatile
  1411  0604  1E88               	btfss	8,5	;volatile
  1412  0605  2E0A               	goto	l1029
  1413                           
  1414                           ;Keybad.c: 20: key = '2';
  1415  0606  3032               	movlw	50
  1416  0607  00F0               	movwf	??_Keybad_Scanner
  1417  0608  0870               	movf	??_Keybad_Scanner,w
  1418  0609  00FD               	movwf	_key
  1419  060A                     l1029:	
  1420                           
  1421                           ;Keybad.c: 21: if ((RD0)&&(RD6))
  1422  060A  1808               	btfsc	8,0	;volatile
  1423  060B  1F08               	btfss	8,6	;volatile
  1424  060C  2E11               	goto	l1035
  1425                           
  1426                           ;Keybad.c: 22: key = '3';
  1427  060D  3033               	movlw	51
  1428  060E  00F0               	movwf	??_Keybad_Scanner
  1429  060F  0870               	movf	??_Keybad_Scanner,w
  1430  0610  00FD               	movwf	_key
  1431  0611                     l1035:	
  1432                           
  1433                           ;Keybad.c: 23: if ((RD0)&&(RD7))
  1434  0611  1808               	btfsc	8,0	;volatile
  1435  0612  1F88               	btfss	8,7	;volatile
  1436  0613  2E18               	goto	l36
  1437                           
  1438                           ;Keybad.c: 24: key = 'A';
  1439  0614  3041               	movlw	65
  1440  0615  00F0               	movwf	??_Keybad_Scanner
  1441  0616  0870               	movf	??_Keybad_Scanner,w
  1442  0617  00FD               	movwf	_key
  1443  0618                     l36:	
  1444                           
  1445                           ;Keybad.c: 25: PORTD =0x02;
  1446  0618  3002               	movlw	2
  1447  0619  0088               	movwf	8	;volatile
  1448                           
  1449                           ;Keybad.c: 26: if ((RD1)&&(RD4))
  1450  061A  1888               	btfsc	8,1	;volatile
  1451  061B  1E08               	btfss	8,4	;volatile
  1452  061C  2E21               	goto	l1047
  1453                           
  1454                           ;Keybad.c: 27: key = '4';
  1455  061D  3034               	movlw	52
  1456  061E  00F0               	movwf	??_Keybad_Scanner
  1457  061F  0870               	movf	??_Keybad_Scanner,w
  1458  0620  00FD               	movwf	_key
  1459  0621                     l1047:	
  1460                           
  1461                           ;Keybad.c: 28: if ((RD1)&&(RD5))
  1462  0621  1888               	btfsc	8,1	;volatile
  1463  0622  1E88               	btfss	8,5	;volatile
  1464  0623  2E28               	goto	l1053
  1465                           
  1466                           ;Keybad.c: 29: key = '5';
  1467  0624  3035               	movlw	53
  1468  0625  00F0               	movwf	??_Keybad_Scanner
  1469  0626  0870               	movf	??_Keybad_Scanner,w
  1470  0627  00FD               	movwf	_key
  1471  0628                     l1053:	
  1472                           
  1473                           ;Keybad.c: 30: if ((RD1)&&(RD6))
  1474  0628  1888               	btfsc	8,1	;volatile
  1475  0629  1F08               	btfss	8,6	;volatile
  1476  062A  2E2F               	goto	l1059
  1477                           
  1478                           ;Keybad.c: 31: key = '6';
  1479  062B  3036               	movlw	54
  1480  062C  00F0               	movwf	??_Keybad_Scanner
  1481  062D  0870               	movf	??_Keybad_Scanner,w
  1482  062E  00FD               	movwf	_key
  1483  062F                     l1059:	
  1484                           
  1485                           ;Keybad.c: 32: if ((RD1)&&(RD7))
  1486  062F  1888               	btfsc	8,1	;volatile
  1487  0630  1F88               	btfss	8,7	;volatile
  1488  0631  2E36               	goto	l40
  1489                           
  1490                           ;Keybad.c: 33: key = 'B';
  1491  0632  3042               	movlw	66
  1492  0633  00F0               	movwf	??_Keybad_Scanner
  1493  0634  0870               	movf	??_Keybad_Scanner,w
  1494  0635  00FD               	movwf	_key
  1495  0636                     l40:	
  1496                           
  1497                           ;Keybad.c: 34: PORTD =0x04;
  1498  0636  3004               	movlw	4
  1499  0637  0088               	movwf	8	;volatile
  1500                           
  1501                           ;Keybad.c: 35: if ((RD2)&&(RD4))
  1502  0638  1908               	btfsc	8,2	;volatile
  1503  0639  1E08               	btfss	8,4	;volatile
  1504  063A  2E3F               	goto	l1071
  1505                           
  1506                           ;Keybad.c: 36: key = '7';
  1507  063B  3037               	movlw	55
  1508  063C  00F0               	movwf	??_Keybad_Scanner
  1509  063D  0870               	movf	??_Keybad_Scanner,w
  1510  063E  00FD               	movwf	_key
  1511  063F                     l1071:	
  1512                           
  1513                           ;Keybad.c: 37: if ((RD2)&&(RD5))
  1514  063F  1908               	btfsc	8,2	;volatile
  1515  0640  1E88               	btfss	8,5	;volatile
  1516  0641  2E46               	goto	l1077
  1517                           
  1518                           ;Keybad.c: 38: key = '8';
  1519  0642  3038               	movlw	56
  1520  0643  00F0               	movwf	??_Keybad_Scanner
  1521  0644  0870               	movf	??_Keybad_Scanner,w
  1522  0645  00FD               	movwf	_key
  1523  0646                     l1077:	
  1524                           
  1525                           ;Keybad.c: 39: if ((RD2)&&(RD6))
  1526  0646  1908               	btfsc	8,2	;volatile
  1527  0647  1F08               	btfss	8,6	;volatile
  1528  0648  2E4D               	goto	l1083
  1529                           
  1530                           ;Keybad.c: 40: key = '9';
  1531  0649  3039               	movlw	57
  1532  064A  00F0               	movwf	??_Keybad_Scanner
  1533  064B  0870               	movf	??_Keybad_Scanner,w
  1534  064C  00FD               	movwf	_key
  1535  064D                     l1083:	
  1536                           
  1537                           ;Keybad.c: 41: if ((RD2)&&(RD7))
  1538  064D  1908               	btfsc	8,2	;volatile
  1539  064E  1F88               	btfss	8,7	;volatile
  1540  064F  2E54               	goto	l44
  1541                           
  1542                           ;Keybad.c: 42: key = 'C';
  1543  0650  3043               	movlw	67
  1544  0651  00F0               	movwf	??_Keybad_Scanner
  1545  0652  0870               	movf	??_Keybad_Scanner,w
  1546  0653  00FD               	movwf	_key
  1547  0654                     l44:	
  1548                           
  1549                           ;Keybad.c: 43: PORTD =0x08;
  1550  0654  3008               	movlw	8
  1551  0655  0088               	movwf	8	;volatile
  1552                           
  1553                           ;Keybad.c: 44: if ((RD3)&&(RD4))
  1554  0656  1988               	btfsc	8,3	;volatile
  1555  0657  1E08               	btfss	8,4	;volatile
  1556  0658  2E5D               	goto	l1095
  1557                           
  1558                           ;Keybad.c: 45: key = '*';
  1559  0659  302A               	movlw	42
  1560  065A  00F0               	movwf	??_Keybad_Scanner
  1561  065B  0870               	movf	??_Keybad_Scanner,w
  1562  065C  00FD               	movwf	_key
  1563  065D                     l1095:	
  1564                           
  1565                           ;Keybad.c: 46: if ((RD3)&&(RD5))
  1566  065D  1988               	btfsc	8,3	;volatile
  1567  065E  1E88               	btfss	8,5	;volatile
  1568  065F  2E64               	goto	l1101
  1569                           
  1570                           ;Keybad.c: 47: key = '0';
  1571  0660  3030               	movlw	48
  1572  0661  00F0               	movwf	??_Keybad_Scanner
  1573  0662  0870               	movf	??_Keybad_Scanner,w
  1574  0663  00FD               	movwf	_key
  1575  0664                     l1101:	
  1576                           
  1577                           ;Keybad.c: 48: if ((RD3)&&(RD6))
  1578  0664  1988               	btfsc	8,3	;volatile
  1579  0665  1F08               	btfss	8,6	;volatile
  1580  0666  2E6B               	goto	l1107
  1581                           
  1582                           ;Keybad.c: 49: key = '#';
  1583  0667  3023               	movlw	35
  1584  0668  00F0               	movwf	??_Keybad_Scanner
  1585  0669  0870               	movf	??_Keybad_Scanner,w
  1586  066A  00FD               	movwf	_key
  1587  066B                     l1107:	
  1588                           
  1589                           ;Keybad.c: 50: if ((RD3)&&(RD7))
  1590  066B  1988               	btfsc	8,3	;volatile
  1591  066C  1F88               	btfss	8,7	;volatile
  1592  066D  2E72               	goto	l48
  1593                           
  1594                           ;Keybad.c: 51: key = 'D';
  1595  066E  3044               	movlw	68
  1596  066F  00F0               	movwf	??_Keybad_Scanner
  1597  0670  0870               	movf	??_Keybad_Scanner,w
  1598  0671  00FD               	movwf	_key
  1599  0672                     l48:	
  1600                           
  1601                           ;Keybad.c: 52: return key ;
  1602  0672  087D               	movf	_key,w
  1603  0673  0008               	return
  1604  0674                     __end_of_Keybad_Scanner:	
  1605                           
  1606                           	psect	text7
  1607  048D                     __ptext7:	
  1608 ;; *************** function _Keybad_Init *****************
  1609 ;; Defined at:
  1610 ;;		line 7 in file "Keybad.c"
  1611 ;; Parameters:    Size  Location     Type
  1612 ;;		None
  1613 ;; Auto vars:     Size  Location     Type
  1614 ;;		None
  1615 ;; Return value:  Size  Location     Type
  1616 ;;                  1    wreg      void 
  1617 ;; Registers used:
  1618 ;;		wreg, status,2
  1619 ;; Tracked objects:
  1620 ;;		On entry : 0/0
  1621 ;;		On exit  : 0/0
  1622 ;;		Unchanged: 0/0
  1623 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1624 ;;      Params:         0       0       0       0       0
  1625 ;;      Locals:         0       0       0       0       0
  1626 ;;      Temps:          0       0       0       0       0
  1627 ;;      Totals:         0       0       0       0       0
  1628 ;;Total ram usage:        0 bytes
  1629 ;; Hardware stack levels used:    1
  1630 ;; This function calls:
  1631 ;;		Nothing
  1632 ;; This function is called by:
  1633 ;;		_main
  1634 ;; This function uses a non-reentrant model
  1635 ;;
  1636                           
  1637                           
  1638                           ;psect for function _Keybad_Init
  1639  048D                     _Keybad_Init:	
  1640                           
  1641                           ;Keybad.c: 8: PORTD = 0x00 ;
  1642                           
  1643                           ;incstack = 0
  1644                           ; Regs used in _Keybad_Init: [wreg+status,2]
  1645  048D  1283               	bcf	3,5	;RP0=0, select bank0
  1646  048E  1303               	bcf	3,6	;RP1=0, select bank0
  1647  048F  0188               	clrf	8	;volatile
  1648                           
  1649                           ;Keybad.c: 9: TRISD = 0xF0 ;
  1650  0490  30F0               	movlw	240
  1651  0491  1683               	bsf	3,5	;RP0=1, select bank1
  1652  0492  1303               	bcf	3,6	;RP1=0, select bank1
  1653  0493  0088               	movwf	8	;volatile
  1654  0494  0008               	return
  1655  0495                     __end_of_Keybad_Init:	
  1656                           
  1657                           	psect	text8
  1658  0495                     __ptext8:	
  1659 ;; *************** function _Entry_Mode_Set *****************
  1660 ;; Defined at:
  1661 ;;		line 116 in file "LCD.c"
  1662 ;; Parameters:    Size  Location     Type
  1663 ;;		None
  1664 ;; Auto vars:     Size  Location     Type
  1665 ;;		None
  1666 ;; Return value:  Size  Location     Type
  1667 ;;                  1    wreg      void 
  1668 ;; Registers used:
  1669 ;;		wreg, status,2, status,0, pclath, cstack
  1670 ;; Tracked objects:
  1671 ;;		On entry : 0/0
  1672 ;;		On exit  : 0/0
  1673 ;;		Unchanged: 0/0
  1674 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1675 ;;      Params:         0       0       0       0       0
  1676 ;;      Locals:         0       0       0       0       0
  1677 ;;      Temps:          0       0       0       0       0
  1678 ;;      Totals:         0       0       0       0       0
  1679 ;;Total ram usage:        0 bytes
  1680 ;; Hardware stack levels used:    1
  1681 ;; Hardware stack levels required when called:    2
  1682 ;; This function calls:
  1683 ;;		_LCD_Command
  1684 ;; This function is called by:
  1685 ;;		_main
  1686 ;; This function uses a non-reentrant model
  1687 ;;
  1688                           
  1689                           
  1690                           ;psect for function _Entry_Mode_Set
  1691  0495                     _Entry_Mode_Set:	
  1692                           
  1693                           ;LCD.c: 118: LCD_Command(0x00);
  1694                           
  1695                           ;incstack = 0
  1696                           ; Regs used in _Entry_Mode_Set: [wreg+status,2+status,0+pclath+cstack]
  1697  0495  3000               	movlw	0
  1698  0496  120A  118A  24AB  120A  118A  	fcall	_LCD_Command
  1699                           
  1700                           ;LCD.c: 119: LCD_Command(0x07);
  1701  049B  3007               	movlw	7
  1702  049C  120A  118A  24AB   	fcall	_LCD_Command
  1703  049F  0008               	return
  1704  04A0                     __end_of_Entry_Mode_Set:	
  1705                           
  1706                           	psect	text9
  1707  04AB                     __ptext9:	
  1708 ;; *************** function _LCD_Command *****************
  1709 ;; Defined at:
  1710 ;;		line 45 in file "LCD.c"
  1711 ;; Parameters:    Size  Location     Type
  1712 ;;  command         1    wreg     unsigned char 
  1713 ;; Auto vars:     Size  Location     Type
  1714 ;;  command         1    2[COMMON] unsigned char 
  1715 ;; Return value:  Size  Location     Type
  1716 ;;                  1    wreg      void 
  1717 ;; Registers used:
  1718 ;;		wreg, status,2, status,0, pclath, cstack
  1719 ;; Tracked objects:
  1720 ;;		On entry : 0/0
  1721 ;;		On exit  : 0/0
  1722 ;;		Unchanged: 0/0
  1723 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1724 ;;      Params:         0       0       0       0       0
  1725 ;;      Locals:         1       0       0       0       0
  1726 ;;      Temps:          1       0       0       0       0
  1727 ;;      Totals:         2       0       0       0       0
  1728 ;;Total ram usage:        2 bytes
  1729 ;; Hardware stack levels used:    1
  1730 ;; Hardware stack levels required when called:    1
  1731 ;; This function calls:
  1732 ;;		_LCD_Data
  1733 ;; This function is called by:
  1734 ;;		_LCD_Init
  1735 ;;		_LCD_set_cursor
  1736 ;;		_LCD_Clear
  1737 ;;		_Entry_Mode_Set
  1738 ;;		_LCD_SL
  1739 ;;		_LCD_RL
  1740 ;;		_LCD_Shift_Cursor_Right
  1741 ;; This function uses a non-reentrant model
  1742 ;;
  1743                           
  1744                           
  1745                           ;psect for function _LCD_Command
  1746  04AB                     _LCD_Command:	
  1747                           
  1748                           ;incstack = 0
  1749                           ; Regs used in _LCD_Command: [wreg+status,2+status,0+pclath+cstack]
  1750                           ;LCD_Command@command stored from wreg
  1751  04AB  00F2               	movwf	LCD_Command@command
  1752                           
  1753                           ;LCD.c: 47: RB5 = 0 ;
  1754  04AC  1283               	bcf	3,5	;RP0=0, select bank0
  1755  04AD  1303               	bcf	3,6	;RP1=0, select bank0
  1756  04AE  1286               	bcf	6,5	;volatile
  1757                           
  1758                           ;LCD.c: 48: LCD_Data(command) ;
  1759  04AF  0872               	movf	LCD_Command@command,w
  1760  04B0  120A  118A  24C1  120A  118A  	fcall	_LCD_Data
  1761                           
  1762                           ;LCD.c: 50: RB4 = 1 ;
  1763  04B5  1283               	bcf	3,5	;RP0=0, select bank0
  1764  04B6  1303               	bcf	3,6	;RP1=0, select bank0
  1765  04B7  1606               	bsf	6,4	;volatile
  1766                           
  1767                           ;LCD.c: 51: _delay((unsigned long)((500)*(4000000/4000000.0))) ;
  1768  04B8  30A6               	movlw	166
  1769  04B9  00F1               	movwf	??_LCD_Command
  1770  04BA                     u977:	
  1771  04BA  0BF1               	decfsz	??_LCD_Command,f
  1772  04BB  2CBA               	goto	u977
  1773  04BC  0000               	nop
  1774                           
  1775                           ;LCD.c: 52: RB4 = 0 ;
  1776  04BD  1283               	bcf	3,5	;RP0=0, select bank0
  1777  04BE  1303               	bcf	3,6	;RP1=0, select bank0
  1778  04BF  1206               	bcf	6,4	;volatile
  1779  04C0  0008               	return
  1780  04C1                     __end_of_LCD_Command:	
  1781                           
  1782                           	psect	text10
  1783  04C1                     __ptext10:	
  1784 ;; *************** function _LCD_Data *****************
  1785 ;; Defined at:
  1786 ;;		line 26 in file "LCD.c"
  1787 ;; Parameters:    Size  Location     Type
  1788 ;;  Data            1    wreg     unsigned char 
  1789 ;; Auto vars:     Size  Location     Type
  1790 ;;  Data            1    0[COMMON] unsigned char 
  1791 ;; Return value:  Size  Location     Type
  1792 ;;                  1    wreg      void 
  1793 ;; Registers used:
  1794 ;;		wreg
  1795 ;; Tracked objects:
  1796 ;;		On entry : 0/0
  1797 ;;		On exit  : 0/0
  1798 ;;		Unchanged: 0/0
  1799 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1800 ;;      Params:         0       0       0       0       0
  1801 ;;      Locals:         1       0       0       0       0
  1802 ;;      Temps:          0       0       0       0       0
  1803 ;;      Totals:         1       0       0       0       0
  1804 ;;Total ram usage:        1 bytes
  1805 ;; Hardware stack levels used:    1
  1806 ;; This function calls:
  1807 ;;		Nothing
  1808 ;; This function is called by:
  1809 ;;		_LCD_Init
  1810 ;;		_LCD_Command
  1811 ;;		_LCD_Write_Char
  1812 ;; This function uses a non-reentrant model
  1813 ;;
  1814                           
  1815                           
  1816                           ;psect for function _LCD_Data
  1817  04C1                     _LCD_Data:	
  1818                           
  1819                           ;incstack = 0
  1820                           ; Regs used in _LCD_Data: [wreg]
  1821                           ;LCD_Data@Data stored from wreg
  1822  04C1  00F0               	movwf	LCD_Data@Data
  1823                           
  1824                           ;LCD.c: 28: if (Data & 1)
  1825  04C2  1C70               	btfss	LCD_Data@Data,0
  1826  04C3  2CC8               	goto	l79
  1827                           
  1828                           ;LCD.c: 29: RB0 = 1 ;
  1829  04C4  1283               	bcf	3,5	;RP0=0, select bank0
  1830  04C5  1303               	bcf	3,6	;RP1=0, select bank0
  1831  04C6  1406               	bsf	6,0	;volatile
  1832  04C7  2CCB               	goto	l80
  1833  04C8                     l79:	
  1834                           
  1835                           ;LCD.c: 30: else
  1836                           ;LCD.c: 31: RB0 = 0 ;
  1837  04C8  1283               	bcf	3,5	;RP0=0, select bank0
  1838  04C9  1303               	bcf	3,6	;RP1=0, select bank0
  1839  04CA  1006               	bcf	6,0	;volatile
  1840  04CB                     l80:	
  1841                           
  1842                           ;LCD.c: 32: if (Data & 2 )
  1843  04CB  1CF0               	btfss	LCD_Data@Data,1
  1844  04CC  2CCF               	goto	l81
  1845                           
  1846                           ;LCD.c: 33: RB1 =1 ;
  1847  04CD  1486               	bsf	6,1	;volatile
  1848  04CE  2CD0               	goto	l82
  1849  04CF                     l81:	
  1850                           
  1851                           ;LCD.c: 34: else
  1852                           ;LCD.c: 35: RB1 = 0 ;
  1853  04CF  1086               	bcf	6,1	;volatile
  1854  04D0                     l82:	
  1855                           
  1856                           ;LCD.c: 36: if (Data & 4)
  1857  04D0  1D70               	btfss	LCD_Data@Data,2
  1858  04D1  2CD4               	goto	l83
  1859                           
  1860                           ;LCD.c: 37: RB2 = 1 ;
  1861  04D2  1506               	bsf	6,2	;volatile
  1862  04D3  2CD5               	goto	l84
  1863  04D4                     l83:	
  1864                           
  1865                           ;LCD.c: 38: else
  1866                           ;LCD.c: 39: RB2 =0 ;
  1867  04D4  1106               	bcf	6,2	;volatile
  1868  04D5                     l84:	
  1869                           
  1870                           ;LCD.c: 40: if (Data & 8)
  1871  04D5  1DF0               	btfss	LCD_Data@Data,3
  1872  04D6  2CD9               	goto	l85
  1873                           
  1874                           ;LCD.c: 41: RB3 = 1 ;
  1875  04D7  1586               	bsf	6,3	;volatile
  1876  04D8  0008               	return
  1877  04D9                     l85:	
  1878                           
  1879                           ;LCD.c: 42: else
  1880                           ;LCD.c: 43: RB3 = 0;
  1881  04D9  1186               	bcf	6,3	;volatile
  1882  04DA  0008               	return
  1883  04DB                     __end_of_LCD_Data:	
  1884  007E                     btemp	set	126	;btemp
  1885  007E                     wtemp0	set	126


Data Sizes:
    Strings     19
    Constant    0
    Data        1
    BSS         1
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80      0       1
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    line	PTR unsigned char  size(1) Largest target is 10
		 -> STR_1(CODE[10]), 

    LCD_Write_String@Str	PTR unsigned char  size(1) Largest target is 10
		 -> STR_2(CODE[9]), STR_1(CODE[10]), 


Critical Paths under _main in COMMON

    _main->_LCD_set_cursor
    _LCD_set_cursor->_LCD_Command
    _LCD_Write_String->_LCD_Write_Char
    _LCD_Write_Char->_LCD_Data
    _LCD_Init->_LCD_Command
    _LCD_Clear->_LCD_Command
    _Entry_Mode_Set->_LCD_Command
    _LCD_Command->_LCD_Data

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    1457
                                             10 COMMON     3     3      0
                     _Entry_Mode_Set
                        _Keybad_Init
                     _Keybad_Scanner
                          _LCD_Clear
                           _LCD_Init
                     _LCD_Write_Char
                   _LCD_Write_String
                     _LCD_set_cursor
 ---------------------------------------------------------------------------------
 (1) _LCD_set_cursor                                       7     6      1     539
                                              3 COMMON     7     6      1
                        _LCD_Command
 ---------------------------------------------------------------------------------
 (1) _LCD_Write_String                                     3     3      0     322
                                              5 COMMON     3     3      0
                     _LCD_Write_Char
 ---------------------------------------------------------------------------------
 (2) _LCD_Write_Char                                       4     4      0     178
                                              1 COMMON     4     4      0
                           _LCD_Data
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             2     2      0     198
                                              3 COMMON     2     2      0
                        _LCD_Command
                           _LCD_Data
 ---------------------------------------------------------------------------------
 (1) _LCD_Clear                                            0     0      0     110
                        _LCD_Command
 ---------------------------------------------------------------------------------
 (1) _Keybad_Scanner                                       2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Keybad_Init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Entry_Mode_Set                                       0     0      0     110
                        _LCD_Command
 ---------------------------------------------------------------------------------
 (2) _LCD_Command                                          2     2      0     110
                                              1 COMMON     2     2      0
                           _LCD_Data
 ---------------------------------------------------------------------------------
 (3) _LCD_Data                                             1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Entry_Mode_Set
     _LCD_Command
       _LCD_Data
   _Keybad_Init
   _Keybad_Scanner
   _LCD_Clear
     _LCD_Command
       _LCD_Data
   _LCD_Init
     _LCD_Command
       _LCD_Data
     _LCD_Data
   _LCD_Write_Char
     _LCD_Data
   _LCD_Write_String
     _LCD_Write_Char
       _LCD_Data
   _LCD_set_cursor
     _LCD_Command
       _LCD_Data

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      0       1       5        1.3%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      D       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0       F      12        0.0%
ABS                  0      0       F       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Mon Jul 20 12:20:09 2020

                        pc 0002                __CFG_CP$OFF 0000               ?_LCD_Command 0070  
                       l31 05FB                         l40 0636                         l44 0654  
                       l36 0618                         l80 04CB                         l48 0672  
                       l81 04CF                         l82 04D0                         l83 04D4  
                       l84 04D5                         l85 04D9                         l79 04C8  
                       fsr 0004                        l162 07F6                        l163 07F6  
                      _RB0 0030                        _RB1 0031                        _RB2 0032  
                      _RB3 0033                        _RD0 0040                        _RB4 0034  
                      _RD1 0041                        _RB5 0035                        _RD2 0042  
                      _RD3 0043                        _RD4 0044                        _RD5 0045  
                      _RD6 0046                        _RD7 0047               __CFG_CPD$OFF 0000  
                      u485 050E                        u907 0534                        u917 053C  
                      u845 054C                        u927 059A                        u937 05A0  
                      u865 0572                        u947 05AD                        u957 05B9  
                      u877 0697                        u967 05F6                        u887 051E  
                      u977 04BA                        u897 0526                        _key 007D  
                      fsr0 0004               __CFG_FOSC$XT 0000               __CFG_LVP$OFF 0000  
      LCD_Write_String@Str 0077                       l1101 0664                       l1023 0603  
                     l1107 066B                       l1035 0611                       l1211 06D4  
                     l1053 0628                       l1029 060A                       l1071 063F  
                     l1047 0621                       l1223 06F4                       l1207 06C9  
                     l1303 07C4                       l1241 0724                       l1217 06E4  
                     l1083 064D                       l1059 062F                       l1235 0714  
                     l1077 0646                       l1157 04DE                       l1253 0744  
                     l1229 0704                       l1095 065D                       l1271 0774  
                     l1247 0734                       l1169 0566                       l1265 0764  
                     l1283 0794                       l1259 0754                       l1277 0784  
                     l1295 07B4                       l1289 07A4                       STR_1 0009  
                     STR_2 0013               __CFG_WRT$OFF 0000          ?_LCD_Write_String 0070  
                     _main 0674                       _line 0020         __size_of_LCD_Clear 000B  
                     btemp 007E              __CFG_BOREN$ON 0000                       start 0000  
       ??_LCD_Write_String 0075              ??_Keybad_Init 0070               LCD_Data@Data 0070  
         __end_of_LCD_Data 04DB           __end_of_LCD_Init 05EB                      ?_main 0070  
            __CFG_WDTE$OFF 0000                      _PORTD 0008                      _TRISB 0086  
                    _TRISD 0088              __CFG_PWRTE$ON 0000                      pclath 000A  
                    status 0003             _Keybad_Scanner 05EB                      wtemp0 007E  
  __size_of_LCD_set_cursor 004B             _LCD_Write_Char 04FD            __initialization 07F7  
             __end_of_main 07F7        __end_of_Keybad_Init 0495         LCD_set_cursor@low4 0078  
                   ??_main 007A         LCD_set_cursor@temp 0079          __end_of_LCD_Clear 04AB  
   __end_of_Keybad_Scanner 0674                     _TRISB4 0434                     _TRISB5 0435  
           _Entry_Mode_Set 0495     __end_of_LCD_Write_Char 0540       __size_of_LCD_Command 0016  
       LCD_Command@command 0072            ?_Keybad_Scanner 0070     __end_of_Entry_Mode_Set 04A0  
                ?_LCD_Data 0070    __end_of__initialization 07FC                  ?_LCD_Init 0070  
          ?_LCD_Write_Char 0070                _Keybad_Init 048D             __pcstackCOMMON 0070  
             __pidataBANK0 048C        LCD_set_cursor@high4 0077            ?_Entry_Mode_Set 0070  
               ??_LCD_Data 0070                 ??_LCD_Init 0073             _LCD_set_cursor 0540  
               __pmaintext 0674  __size_of_LCD_Write_String 0022                 __stringtab 0003  
   __end_of_LCD_set_cursor 058B            LCD_set_cursor@c 0073            LCD_set_cursor@r 0076  
                  __ptext1 0540                    __ptext2 04DB                    __ptext3 04FD  
                  __ptext4 058B                    __ptext5 04A0                    __ptext6 05EB  
                  __ptext7 048D                    __ptext8 0495                    __ptext9 04AB  
                _LCD_Clear 04A0       end_of_initialization 07FC            ?_LCD_set_cursor 0073  
         ??_Keybad_Scanner 0070                 ?_LCD_Clear 0070          LCD_Write_String@i 0075  
         ??_LCD_Write_Char 0071          __size_of_LCD_Data 001A          __size_of_LCD_Init 0060  
             ?_Keybad_Init 0070              ??_LCD_Command 0071           _LCD_Write_String 04DB  
      start_initialization 07F7           ??_Entry_Mode_Set 0073                __pdataBANK0 0020  
      __end_of_LCD_Command 04C1                __pbssCOMMON 007D                  ___latbits 0002  
              ??_LCD_Clear 0073                  __pstrings 0003           ??_LCD_set_cursor 0074  
                 _LCD_Data 04C1                   _LCD_Init 058B       __size_of_Keybad_Init 0008  
              _LCD_Command 04AB                __stringbase 0008   __end_of_LCD_Write_String 04FD  
      LCD_Write_Char@High4 0073         __end_of__stringtab 0009                   __ptext10 04C1  
            __size_of_main 0183         LCD_Write_Char@Data 0074         LCD_Write_Char@Low4 0072  
  __size_of_Keybad_Scanner 0089                  stringcode 0003    __size_of_LCD_Write_Char 0043  
                 stringdir 0003                   stringtab 0003    __size_of_Entry_Mode_Set 000B  
