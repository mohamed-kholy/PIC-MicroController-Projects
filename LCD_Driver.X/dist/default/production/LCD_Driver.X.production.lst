

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Wed Jul 15 23:10:43 2020

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	text6,local,class=CODE,merge=1,delta=2
    15                           	psect	text7,local,class=CODE,merge=1,delta=2
    16                           	psect	text8,local,class=CODE,merge=1,delta=2
    17                           	psect	text9,local,class=CODE,merge=1,delta=2
    18                           	dabs	1,0x7E,2
    19  0000                     
    20                           ; Version 1.41
    21                           ; Generated 25/01/2017 GMT
    22                           ; 
    23                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    24                           ; All rights reserved.
    25                           ; 
    26                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    27                           ; 
    28                           ; Redistribution and use in source and binary forms, with or without modification, are
    29                           ; permitted provided that the following conditions are met:
    30                           ; 
    31                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    32                           ;        conditions and the following disclaimer.
    33                           ; 
    34                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    35                           ;        of conditions and the following disclaimer in the documentation and/or other
    36                           ;        materials provided with the distribution.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC16F877A Definitions
    52                           ; 
    53                           ; SFR Addresses
    54  0000                     	;# 
    55  0001                     	;# 
    56  0002                     	;# 
    57  0003                     	;# 
    58  0004                     	;# 
    59  0005                     	;# 
    60  0006                     	;# 
    61  0007                     	;# 
    62  0008                     	;# 
    63  0009                     	;# 
    64  000A                     	;# 
    65  000B                     	;# 
    66  000C                     	;# 
    67  000D                     	;# 
    68  000E                     	;# 
    69  000E                     	;# 
    70  000F                     	;# 
    71  0010                     	;# 
    72  0011                     	;# 
    73  0012                     	;# 
    74  0013                     	;# 
    75  0014                     	;# 
    76  0015                     	;# 
    77  0015                     	;# 
    78  0016                     	;# 
    79  0017                     	;# 
    80  0018                     	;# 
    81  0019                     	;# 
    82  001A                     	;# 
    83  001B                     	;# 
    84  001B                     	;# 
    85  001C                     	;# 
    86  001D                     	;# 
    87  001E                     	;# 
    88  001F                     	;# 
    89  0081                     	;# 
    90  0085                     	;# 
    91  0086                     	;# 
    92  0087                     	;# 
    93  0088                     	;# 
    94  0089                     	;# 
    95  008C                     	;# 
    96  008D                     	;# 
    97  008E                     	;# 
    98  0091                     	;# 
    99  0092                     	;# 
   100  0093                     	;# 
   101  0094                     	;# 
   102  0098                     	;# 
   103  0099                     	;# 
   104  009C                     	;# 
   105  009D                     	;# 
   106  009E                     	;# 
   107  009F                     	;# 
   108  010C                     	;# 
   109  010D                     	;# 
   110  010E                     	;# 
   111  010F                     	;# 
   112  018C                     	;# 
   113  018D                     	;# 
   114  0000                     	;# 
   115  0001                     	;# 
   116  0002                     	;# 
   117  0003                     	;# 
   118  0004                     	;# 
   119  0005                     	;# 
   120  0006                     	;# 
   121  0007                     	;# 
   122  0008                     	;# 
   123  0009                     	;# 
   124  000A                     	;# 
   125  000B                     	;# 
   126  000C                     	;# 
   127  000D                     	;# 
   128  000E                     	;# 
   129  000E                     	;# 
   130  000F                     	;# 
   131  0010                     	;# 
   132  0011                     	;# 
   133  0012                     	;# 
   134  0013                     	;# 
   135  0014                     	;# 
   136  0015                     	;# 
   137  0015                     	;# 
   138  0016                     	;# 
   139  0017                     	;# 
   140  0018                     	;# 
   141  0019                     	;# 
   142  001A                     	;# 
   143  001B                     	;# 
   144  001B                     	;# 
   145  001C                     	;# 
   146  001D                     	;# 
   147  001E                     	;# 
   148  001F                     	;# 
   149  0081                     	;# 
   150  0085                     	;# 
   151  0086                     	;# 
   152  0087                     	;# 
   153  0088                     	;# 
   154  0089                     	;# 
   155  008C                     	;# 
   156  008D                     	;# 
   157  008E                     	;# 
   158  0091                     	;# 
   159  0092                     	;# 
   160  0093                     	;# 
   161  0094                     	;# 
   162  0098                     	;# 
   163  0099                     	;# 
   164  009C                     	;# 
   165  009D                     	;# 
   166  009E                     	;# 
   167  009F                     	;# 
   168  010C                     	;# 
   169  010D                     	;# 
   170  010E                     	;# 
   171  010F                     	;# 
   172  018C                     	;# 
   173  018D                     	;# 
   174  0034                     _RB4	set	52
   175  0035                     _RB5	set	53
   176  0033                     _RB3	set	51
   177  0032                     _RB2	set	50
   178  0031                     _RB1	set	49
   179  0030                     _RB0	set	48
   180  0086                     _TRISB	set	134
   181  0435                     _TRISB5	set	1077
   182  0434                     _TRISB4	set	1076
   183                           
   184                           	psect	strings
   185  0003                     __pstrings:	
   186  0003                     stringtab:	
   187  0003                     __stringtab:	
   188  0003                     stringcode:	
   189                           ;	String table - string pointers are 1 byte each
   190                           
   191  0003                     stringdir:	
   192  0003  3000               	movlw	high stringdir
   193  0004  008A               	movwf	10
   194  0005  0804               	movf	4,w
   195  0006  0A84               	incf	4,f
   196  0007  0782               	addwf	2,f
   197  0008                     __stringbase:	
   198  0008  3400               	retlw	0
   199  0009                     __end_of__stringtab:	
   200  0009                     STR_1:	
   201  0009  344D               	retlw	77	;'M'
   202  000A  346F               	retlw	111	;'o'
   203  000B  3468               	retlw	104	;'h'
   204  000C  3461               	retlw	97	;'a'
   205  000D  346D               	retlw	109	;'m'
   206  000E  3465               	retlw	101	;'e'
   207  000F  3464               	retlw	100	;'d'
   208  0010  3420               	retlw	32	;' '
   209  0011  3445               	retlw	69	;'E'
   210  0012  346C               	retlw	108	;'l'
   211  0013  346B               	retlw	107	;'k'
   212  0014  3468               	retlw	104	;'h'
   213  0015  346F               	retlw	111	;'o'
   214  0016  346C               	retlw	108	;'l'
   215  0017  3479               	retlw	121	;'y'
   216  0018  3400               	retlw	0
   217  0019  3400               	retlw	0
   218  001A                     STR_2:	
   219  001A  3430               	retlw	48	;'0'
   220  001B  3431               	retlw	49	;'1'
   221  001C  3430               	retlw	48	;'0'
   222  001D  3432               	retlw	50	;'2'
   223  001E  3438               	retlw	56	;'8'
   224  001F  3435               	retlw	53	;'5'
   225  0020  3432               	retlw	50	;'2'
   226  0021  3438               	retlw	56	;'8'
   227  0022  3439               	retlw	57	;'9'
   228  0023  3439               	retlw	57	;'9'
   229  0024  3431               	retlw	49	;'1'
   230  0025  3400               	retlw	0
   231  0026  3400               	retlw	0
   232                           
   233                           ; #config settings
   234  0000                     
   235                           	psect	cinit
   236  07FC                     start_initialization:	
   237  07FC                     __initialization:	
   238  07FC                     end_of_initialization:	
   239                           ;End of C runtime variable initialization code
   240                           
   241  07FC                     __end_of__initialization:	
   242  07FC  0183               	clrf	3
   243  07FD  120A  118A  2F7A   	ljmp	_main	;jump to C main() function
   244                           
   245                           	psect	cstackCOMMON
   246  0070                     __pcstackCOMMON:	
   247  0070                     ?_LCD_Data:	
   248  0070                     ??_LCD_Data:	
   249                           ; 1 bytes @ 0x0
   250                           
   251  0070                     ?_LCD_Command:	
   252                           ; 1 bytes @ 0x0
   253                           
   254  0070                     ?_LCD_Init:	
   255                           ; 1 bytes @ 0x0
   256                           
   257  0070                     ?_LCD_Write_Char:	
   258                           ; 1 bytes @ 0x0
   259                           
   260  0070                     ?_LCD_Write_String:	
   261                           ; 1 bytes @ 0x0
   262                           
   263  0070                     ?_LCD_Clear:	
   264                           ; 1 bytes @ 0x0
   265                           
   266  0070                     ?_LCD_SL:	
   267                           ; 1 bytes @ 0x0
   268                           
   269  0070                     ?_LCD_RL:	
   270                           ; 1 bytes @ 0x0
   271                           
   272  0070                     ?_main:	
   273                           ; 1 bytes @ 0x0
   274                           
   275  0070                     LCD_Data@Data:	
   276                           ; 1 bytes @ 0x0
   277                           
   278                           
   279                           ; 1 bytes @ 0x0
   280  0070                     	ds	1
   281  0071                     ??_LCD_Command:	
   282  0071                     ??_LCD_Write_Char:	
   283                           ; 1 bytes @ 0x1
   284                           
   285                           
   286                           ; 1 bytes @ 0x1
   287  0071                     	ds	1
   288  0072                     LCD_Command@command:	
   289  0072                     LCD_Write_Char@Low4:	
   290                           ; 1 bytes @ 0x2
   291                           
   292                           
   293                           ; 1 bytes @ 0x2
   294  0072                     	ds	1
   295  0073                     ??_LCD_Init:	
   296  0073                     ?_LCD_set_cursor:	
   297                           ; 1 bytes @ 0x3
   298                           
   299  0073                     ??_LCD_Clear:	
   300                           ; 1 bytes @ 0x3
   301                           
   302  0073                     ??_LCD_SL:	
   303                           ; 1 bytes @ 0x3
   304                           
   305  0073                     ??_LCD_RL:	
   306                           ; 1 bytes @ 0x3
   307                           
   308  0073                     LCD_Write_Char@High4:	
   309                           ; 1 bytes @ 0x3
   310                           
   311  0073                     LCD_set_cursor@c:	
   312                           ; 1 bytes @ 0x3
   313                           
   314                           
   315                           ; 1 bytes @ 0x3
   316  0073                     	ds	1
   317  0074                     ??_LCD_set_cursor:	
   318  0074                     LCD_Write_Char@Data:	
   319                           ; 1 bytes @ 0x4
   320                           
   321                           
   322                           ; 1 bytes @ 0x4
   323  0074                     	ds	1
   324  0075                     ??_LCD_Write_String:	
   325  0075                     LCD_Write_String@i:	
   326                           ; 1 bytes @ 0x5
   327                           
   328                           
   329                           ; 2 bytes @ 0x5
   330  0075                     	ds	1
   331  0076                     LCD_set_cursor@r:	
   332                           
   333                           ; 1 bytes @ 0x6
   334  0076                     	ds	1
   335  0077                     LCD_Write_String@Str:	
   336  0077                     LCD_set_cursor@high4:	
   337                           ; 1 bytes @ 0x7
   338                           
   339                           
   340                           ; 1 bytes @ 0x7
   341  0077                     	ds	1
   342  0078                     LCD_set_cursor@low4:	
   343                           
   344                           ; 1 bytes @ 0x8
   345  0078                     	ds	1
   346  0079                     LCD_set_cursor@temp:	
   347                           
   348                           ; 1 bytes @ 0x9
   349  0079                     	ds	1
   350  007A                     ??_main:	
   351                           
   352                           ; 1 bytes @ 0xA
   353  007A                     	ds	3
   354                           
   355                           	psect	cstackBANK0
   356  0020                     __pcstackBANK0:	
   357  0020                     main@i:	
   358                           
   359                           ; 2 bytes @ 0x0
   360  0020                     	ds	2
   361  0022                     main@i_83:	
   362                           
   363                           ; 2 bytes @ 0x2
   364  0022                     	ds	2
   365                           
   366                           	psect	maintext
   367  077A                     __pmaintext:	
   368 ;;
   369 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   370 ;;
   371 ;; *************** function _main *****************
   372 ;; Defined at:
   373 ;;		line 13 in file "main.c"
   374 ;; Parameters:    Size  Location     Type
   375 ;;		None
   376 ;; Auto vars:     Size  Location     Type
   377 ;;  i               2    2[BANK0 ] int 
   378 ;;  i               2    0[BANK0 ] int 
   379 ;; Return value:  Size  Location     Type
   380 ;;                  1    wreg      void 
   381 ;; Registers used:
   382 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   383 ;; Tracked objects:
   384 ;;		On entry : B00/0
   385 ;;		On exit  : 0/0
   386 ;;		Unchanged: 0/0
   387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   388 ;;      Params:         0       0       0       0       0
   389 ;;      Locals:         0       4       0       0       0
   390 ;;      Temps:          3       0       0       0       0
   391 ;;      Totals:         3       4       0       0       0
   392 ;;Total ram usage:        7 bytes
   393 ;; Hardware stack levels required when called:    3
   394 ;; This function calls:
   395 ;;		_LCD_Clear
   396 ;;		_LCD_Init
   397 ;;		_LCD_RL
   398 ;;		_LCD_SL
   399 ;;		_LCD_Write_String
   400 ;;		_LCD_set_cursor
   401 ;; This function is called by:
   402 ;;		Startup code after reset
   403 ;; This function uses a non-reentrant model
   404 ;;
   405                           
   406                           
   407                           ;psect for function _main
   408  077A                     _main:	
   409                           
   410                           ;main.c: 14: LCD_Init();
   411                           
   412                           ;incstack = 0
   413                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   414  077A  120A  118A  271A  120A  118A  	fcall	_LCD_Init
   415                           
   416                           ;main.c: 15: LCD_Clear();
   417  077F  120A  118A  2619  120A  118A  	fcall	_LCD_Clear
   418                           
   419                           ;main.c: 16: LCD_set_cursor(1,1);
   420  0784  01F3               	clrf	LCD_set_cursor@c
   421  0785  0AF3               	incf	LCD_set_cursor@c,f
   422  0786  3001               	movlw	1
   423  0787  120A  118A  26CF  120A  118A  	fcall	_LCD_set_cursor
   424                           
   425                           ;main.c: 17: LCD_Write_String("Mohamed Elkholy\0");
   426  078C  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   427  078D  120A  118A  266A  120A  118A  	fcall	_LCD_Write_String
   428                           
   429                           ;main.c: 18: LCD_set_cursor(2,1);
   430  0792  01F3               	clrf	LCD_set_cursor@c
   431  0793  0AF3               	incf	LCD_set_cursor@c,f
   432  0794  3002               	movlw	2
   433  0795  120A  118A  26CF  120A  118A  	fcall	_LCD_set_cursor
   434                           
   435                           ;main.c: 19: LCD_Write_String("01028528991\0");
   436  079A  3012               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   437  079B  120A  118A  266A  120A  118A  	fcall	_LCD_Write_String
   438  07A0                     l816:	
   439                           ;main.c: 21: while (1) {
   440                           
   441                           
   442                           ;main.c: 22: for (int i=0 ; i<4 ; i++) {
   443  07A0  1283               	bcf	3,5	;RP0=0, select bank0
   444  07A1  1303               	bcf	3,6	;RP1=0, select bank0
   445  07A2  01A0               	clrf	main@i
   446  07A3  01A1               	clrf	main@i+1
   447  07A4  0821               	movf	main@i+1,w
   448  07A5  3A80               	xorlw	128
   449  07A6  00FF               	movwf	127
   450  07A7  3080               	movlw	128
   451  07A8  027F               	subwf	127,w
   452  07A9  1D03               	skipz
   453  07AA  2FAD               	goto	u255
   454  07AB  3004               	movlw	4
   455  07AC  0220               	subwf	main@i,w
   456  07AD                     u255:	
   457  07AD  1803               	btfsc	3,0
   458  07AE  2FD3               	goto	l830
   459  07AF                     l822:	
   460                           
   461                           ;main.c: 23: _delay((unsigned long)((300)*(4000000/4000.0)));
   462  07AF  3002               	movlw	2
   463  07B0  00FC               	movwf	??_main+2
   464  07B1  3086               	movlw	134
   465  07B2  00FB               	movwf	??_main+1
   466  07B3  3099               	movlw	153
   467  07B4  00FA               	movwf	??_main
   468  07B5                     u297:	
   469  07B5  0BFA               	decfsz	??_main,f
   470  07B6  2FB5               	goto	u297
   471  07B7  0BFB               	decfsz	??_main+1,f
   472  07B8  2FB5               	goto	u297
   473  07B9  0BFC               	decfsz	??_main+2,f
   474  07BA  2FB5               	goto	u297
   475                           
   476                           ;main.c: 24: LCD_RL();
   477  07BB  120A  118A  2624  120A  118A  	fcall	_LCD_RL
   478  07C0  3001               	movlw	1
   479  07C1  1283               	bcf	3,5	;RP0=0, select bank0
   480  07C2  1303               	bcf	3,6	;RP1=0, select bank0
   481  07C3  07A0               	addwf	main@i,f
   482  07C4  1803               	skipnc
   483  07C5  0AA1               	incf	main@i+1,f
   484  07C6  3000               	movlw	0
   485  07C7  07A1               	addwf	main@i+1,f
   486  07C8  0821               	movf	main@i+1,w
   487  07C9  3A80               	xorlw	128
   488  07CA  00FF               	movwf	127
   489  07CB  3080               	movlw	128
   490  07CC  027F               	subwf	127,w
   491  07CD  1D03               	skipz
   492  07CE  2FD1               	goto	u265
   493  07CF  3004               	movlw	4
   494  07D0  0220               	subwf	main@i,w
   495  07D1                     u265:	
   496  07D1  1C03               	skipc
   497  07D2  2FAF               	goto	l822
   498  07D3                     l830:	
   499                           
   500                           ;main.c: 25: }
   501                           ;main.c: 26: for (int i=0 ; i<4 ; i++) {
   502  07D3  1283               	bcf	3,5	;RP0=0, select bank0
   503  07D4  1303               	bcf	3,6	;RP1=0, select bank0
   504  07D5  01A2               	clrf	main@i_83
   505  07D6  01A3               	clrf	main@i_83+1
   506  07D7                     L1:	
   507  07D7  0823               	movf	main@i_83+1,w
   508  07D8  3A80               	xorlw	128
   509  07D9  00FF               	movwf	127
   510  07DA  3080               	movlw	128
   511  07DB  027F               	subwf	127,w
   512  07DC  1D03               	skipz
   513  07DD  2FE0               	goto	u275
   514  07DE  3004               	movlw	4
   515  07DF  0222               	subwf	main@i_83,w
   516  07E0                     u275:	
   517  07E0  1803               	btfsc	3,0
   518  07E1  2FA0               	goto	l816
   519                           
   520                           ;main.c: 27: _delay((unsigned long)((300)*(4000000/4000.0)));
   521  07E2  3002               	movlw	2
   522  07E3  00FC               	movwf	??_main+2
   523  07E4  3086               	movlw	134
   524  07E5  00FB               	movwf	??_main+1
   525  07E6  3099               	movlw	153
   526  07E7  00FA               	movwf	??_main
   527  07E8                     u307:	
   528  07E8  0BFA               	decfsz	??_main,f
   529  07E9  2FE8               	goto	u307
   530  07EA  0BFB               	decfsz	??_main+1,f
   531  07EB  2FE8               	goto	u307
   532  07EC  0BFC               	decfsz	??_main+2,f
   533  07ED  2FE8               	goto	u307
   534                           
   535                           ;main.c: 28: LCD_SL();
   536  07EE  120A  118A  262F  120A  118A  	fcall	_LCD_SL
   537  07F3  3001               	movlw	1
   538  07F4  1283               	bcf	3,5	;RP0=0, select bank0
   539  07F5  1303               	bcf	3,6	;RP1=0, select bank0
   540  07F6  07A2               	addwf	main@i_83,f
   541  07F7  1803               	skipnc
   542  07F8  0AA3               	incf	main@i_83+1,f
   543  07F9  3000               	movlw	0
   544  07FA  07A3               	addwf	main@i_83+1,f
   545  07FB  2FD7               	goto	L1
   546  07FC                     __end_of_main:	
   547                           ;main.c: 29: }
   548                           ;main.c: 30: }
   549                           ;main.c: 31: return;
   550                           
   551                           
   552                           	psect	text1
   553  06CF                     __ptext1:	
   554 ;; *************** function _LCD_set_cursor *****************
   555 ;; Defined at:
   556 ;;		line 77 in file "LCD.c"
   557 ;; Parameters:    Size  Location     Type
   558 ;;  r               1    wreg     unsigned char 
   559 ;;  c               1    3[COMMON] unsigned char 
   560 ;; Auto vars:     Size  Location     Type
   561 ;;  r               1    6[COMMON] unsigned char 
   562 ;;  temp            1    9[COMMON] unsigned char 
   563 ;;  low4            1    8[COMMON] unsigned char 
   564 ;;  high4           1    7[COMMON] unsigned char 
   565 ;; Return value:  Size  Location     Type
   566 ;;                  1    wreg      void 
   567 ;; Registers used:
   568 ;;		wreg, status,2, status,0, pclath, cstack
   569 ;; Tracked objects:
   570 ;;		On entry : 0/0
   571 ;;		On exit  : 0/0
   572 ;;		Unchanged: 0/0
   573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   574 ;;      Params:         1       0       0       0       0
   575 ;;      Locals:         4       0       0       0       0
   576 ;;      Temps:          2       0       0       0       0
   577 ;;      Totals:         7       0       0       0       0
   578 ;;Total ram usage:        7 bytes
   579 ;; Hardware stack levels used:    1
   580 ;; Hardware stack levels required when called:    2
   581 ;; This function calls:
   582 ;;		_LCD_Command
   583 ;; This function is called by:
   584 ;;		_main
   585 ;; This function uses a non-reentrant model
   586 ;;
   587                           
   588                           
   589                           ;psect for function _LCD_set_cursor
   590  06CF                     _LCD_set_cursor:	
   591                           
   592                           ;incstack = 0
   593                           ; Regs used in _LCD_set_cursor: [wreg+status,2+status,0+pclath+cstack]
   594                           ;LCD_set_cursor@r stored from wreg
   595  06CF  00F6               	movwf	LCD_set_cursor@r
   596                           
   597                           ;LCD.c: 79: unsigned char temp , high4 , low4 ;
   598                           ;LCD.c: 80: if (r==1) {
   599  06D0  0376               	decf	LCD_set_cursor@r,w
   600  06D1  1D03               	btfss	3,2
   601  06D2  2EF5               	goto	l794
   602                           
   603                           ;LCD.c: 81: temp = 0x80 +c-1 ;
   604  06D3  0873               	movf	LCD_set_cursor@c,w
   605  06D4  3E7F               	addlw	127
   606  06D5  00F4               	movwf	??_LCD_set_cursor
   607  06D6  0874               	movf	??_LCD_set_cursor,w
   608  06D7  00F9               	movwf	LCD_set_cursor@temp
   609                           
   610                           ;LCD.c: 82: high4 = temp >> 4 ;
   611  06D8  0879               	movf	LCD_set_cursor@temp,w
   612  06D9  00F4               	movwf	??_LCD_set_cursor
   613  06DA  3004               	movlw	4
   614  06DB                     u225:	
   615  06DB  1003               	clrc
   616  06DC  0CF4               	rrf	??_LCD_set_cursor,f
   617  06DD  3EFF               	addlw	-1
   618  06DE  1D03               	skipz
   619  06DF  2EDB               	goto	u225
   620  06E0  0874               	movf	??_LCD_set_cursor,w
   621  06E1  00F5               	movwf	??_LCD_set_cursor+1
   622  06E2  0875               	movf	??_LCD_set_cursor+1,w
   623  06E3  00F7               	movwf	LCD_set_cursor@high4
   624                           
   625                           ;LCD.c: 83: low4 = temp & 0x0F ;
   626  06E4  0879               	movf	LCD_set_cursor@temp,w
   627  06E5  390F               	andlw	15
   628  06E6  00F4               	movwf	??_LCD_set_cursor
   629  06E7  0874               	movf	??_LCD_set_cursor,w
   630  06E8  00F8               	movwf	LCD_set_cursor@low4
   631                           
   632                           ;LCD.c: 84: LCD_Command(high4);
   633  06E9  0877               	movf	LCD_set_cursor@high4,w
   634  06EA  120A  118A  263A  120A  118A  	fcall	_LCD_Command
   635                           
   636                           ;LCD.c: 85: LCD_Command(low4) ;
   637  06EF  0878               	movf	LCD_set_cursor@low4,w
   638  06F0  120A  118A  263A  120A  118A  	fcall	_LCD_Command
   639  06F5                     l794:	
   640                           
   641                           ;LCD.c: 87: }
   642                           ;LCD.c: 88: if (r==2) {
   643  06F5  3002               	movlw	2
   644  06F6  0676               	xorwf	LCD_set_cursor@r,w
   645  06F7  1D03               	btfss	3,2
   646  06F8  0008               	return
   647                           
   648                           ;LCD.c: 89: temp = 0xC0 +c-1 ;
   649  06F9  0873               	movf	LCD_set_cursor@c,w
   650  06FA  3EBF               	addlw	191
   651  06FB  00F4               	movwf	??_LCD_set_cursor
   652  06FC  0874               	movf	??_LCD_set_cursor,w
   653  06FD  00F9               	movwf	LCD_set_cursor@temp
   654                           
   655                           ;LCD.c: 90: high4 = temp >> 4 ;
   656  06FE  0879               	movf	LCD_set_cursor@temp,w
   657  06FF  00F4               	movwf	??_LCD_set_cursor
   658  0700  3004               	movlw	4
   659  0701                     u245:	
   660  0701  1003               	clrc
   661  0702  0CF4               	rrf	??_LCD_set_cursor,f
   662  0703  3EFF               	addlw	-1
   663  0704  1D03               	skipz
   664  0705  2F01               	goto	u245
   665  0706  0874               	movf	??_LCD_set_cursor,w
   666  0707  00F5               	movwf	??_LCD_set_cursor+1
   667  0708  0875               	movf	??_LCD_set_cursor+1,w
   668  0709  00F7               	movwf	LCD_set_cursor@high4
   669                           
   670                           ;LCD.c: 91: low4 = temp & 0x0F ;
   671  070A  0879               	movf	LCD_set_cursor@temp,w
   672  070B  390F               	andlw	15
   673  070C  00F4               	movwf	??_LCD_set_cursor
   674  070D  0874               	movf	??_LCD_set_cursor,w
   675  070E  00F8               	movwf	LCD_set_cursor@low4
   676                           
   677                           ;LCD.c: 92: LCD_Command(high4);
   678  070F  0877               	movf	LCD_set_cursor@high4,w
   679  0710  120A  118A  263A  120A  118A  	fcall	_LCD_Command
   680                           
   681                           ;LCD.c: 93: LCD_Command(low4) ;
   682  0715  0878               	movf	LCD_set_cursor@low4,w
   683  0716  120A  118A  263A   	fcall	_LCD_Command
   684  0719  0008               	return
   685  071A                     __end_of_LCD_set_cursor:	
   686                           
   687                           	psect	text2
   688  066A                     __ptext2:	
   689 ;; *************** function _LCD_Write_String *****************
   690 ;; Defined at:
   691 ;;		line 71 in file "LCD.c"
   692 ;; Parameters:    Size  Location     Type
   693 ;;  Str             1    wreg     PTR unsigned char 
   694 ;;		 -> STR_2(13), STR_1(17), 
   695 ;; Auto vars:     Size  Location     Type
   696 ;;  Str             1    7[COMMON] PTR unsigned char 
   697 ;;		 -> STR_2(13), STR_1(17), 
   698 ;;  i               2    5[COMMON] int 
   699 ;; Return value:  Size  Location     Type
   700 ;;                  1    wreg      void 
   701 ;; Registers used:
   702 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   703 ;; Tracked objects:
   704 ;;		On entry : 0/0
   705 ;;		On exit  : 0/0
   706 ;;		Unchanged: 0/0
   707 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   708 ;;      Params:         0       0       0       0       0
   709 ;;      Locals:         3       0       0       0       0
   710 ;;      Temps:          0       0       0       0       0
   711 ;;      Totals:         3       0       0       0       0
   712 ;;Total ram usage:        3 bytes
   713 ;; Hardware stack levels used:    1
   714 ;; Hardware stack levels required when called:    2
   715 ;; This function calls:
   716 ;;		_LCD_Write_Char
   717 ;; This function is called by:
   718 ;;		_main
   719 ;; This function uses a non-reentrant model
   720 ;;
   721                           
   722                           
   723                           ;psect for function _LCD_Write_String
   724  066A                     _LCD_Write_String:	
   725                           
   726                           ;incstack = 0
   727                           ; Regs used in _LCD_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   728                           ;LCD_Write_String@Str stored from wreg
   729  066A  00F7               	movwf	LCD_Write_String@Str
   730                           
   731                           ;LCD.c: 72: int i ;
   732                           ;LCD.c: 73: for (i = 0 ; Str[i]!='\0'; i++ ) {
   733  066B  01F5               	clrf	LCD_Write_String@i
   734  066C  01F6               	clrf	LCD_Write_String@i+1
   735  066D                     l782:	
   736  066D  0875               	movf	LCD_Write_String@i,w
   737  066E  0777               	addwf	LCD_Write_String@Str,w
   738  066F  0084               	movwf	4
   739  0670  120A  118A  2003  120A  118A  	fcall	stringdir
   740  0675  3A00               	xorlw	0
   741  0676  1903               	btfsc	3,2
   742  0677  0008               	return
   743                           
   744                           ;LCD.c: 74: LCD_Write_Char(Str[i]);
   745  0678  0875               	movf	LCD_Write_String@i,w
   746  0679  0777               	addwf	LCD_Write_String@Str,w
   747  067A  0084               	movwf	4
   748  067B  120A  118A  2003  120A  118A  	fcall	stringdir
   749  0680  120A  118A  268C  120A  118A  	fcall	_LCD_Write_Char
   750  0685  3001               	movlw	1
   751  0686  07F5               	addwf	LCD_Write_String@i,f
   752  0687  1803               	skipnc
   753  0688  0AF6               	incf	LCD_Write_String@i+1,f
   754  0689  3000               	movlw	0
   755  068A  07F6               	addwf	LCD_Write_String@i+1,f
   756  068B  2E6D               	goto	l782
   757  068C                     __end_of_LCD_Write_String:	
   758                           
   759                           	psect	text3
   760  068C                     __ptext3:	
   761 ;; *************** function _LCD_Write_Char *****************
   762 ;; Defined at:
   763 ;;		line 54 in file "LCD.c"
   764 ;; Parameters:    Size  Location     Type
   765 ;;  Data            1    wreg     unsigned char 
   766 ;; Auto vars:     Size  Location     Type
   767 ;;  Data            1    4[COMMON] unsigned char 
   768 ;;  High4           1    3[COMMON] unsigned char 
   769 ;;  Low4            1    2[COMMON] unsigned char 
   770 ;; Return value:  Size  Location     Type
   771 ;;                  1    wreg      void 
   772 ;; Registers used:
   773 ;;		wreg, status,2, status,0, pclath, cstack
   774 ;; Tracked objects:
   775 ;;		On entry : 0/0
   776 ;;		On exit  : 0/0
   777 ;;		Unchanged: 0/0
   778 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   779 ;;      Params:         0       0       0       0       0
   780 ;;      Locals:         3       0       0       0       0
   781 ;;      Temps:          1       0       0       0       0
   782 ;;      Totals:         4       0       0       0       0
   783 ;;Total ram usage:        4 bytes
   784 ;; Hardware stack levels used:    1
   785 ;; Hardware stack levels required when called:    1
   786 ;; This function calls:
   787 ;;		_LCD_Data
   788 ;; This function is called by:
   789 ;;		_LCD_Write_String
   790 ;; This function uses a non-reentrant model
   791 ;;
   792                           
   793                           
   794                           ;psect for function _LCD_Write_Char
   795  068C                     _LCD_Write_Char:	
   796                           
   797                           ;incstack = 0
   798                           ; Regs used in _LCD_Write_Char: [wreg+status,2+status,0+pclath+cstack]
   799                           ;LCD_Write_Char@Data stored from wreg
   800  068C  00F4               	movwf	LCD_Write_Char@Data
   801                           
   802                           ;LCD.c: 56: char Low4 , High4 ;
   803                           ;LCD.c: 57: Low4 = Data & 0x0F ;
   804  068D  0874               	movf	LCD_Write_Char@Data,w
   805  068E  390F               	andlw	15
   806  068F  00F1               	movwf	??_LCD_Write_Char
   807  0690  0871               	movf	??_LCD_Write_Char,w
   808  0691  00F2               	movwf	LCD_Write_Char@Low4
   809                           
   810                           ;LCD.c: 58: High4 = Data & 0xF0 ;
   811  0692  0874               	movf	LCD_Write_Char@Data,w
   812  0693  39F0               	andlw	240
   813  0694  00F1               	movwf	??_LCD_Write_Char
   814  0695  0871               	movf	??_LCD_Write_Char,w
   815  0696  00F3               	movwf	LCD_Write_Char@High4
   816                           
   817                           ;LCD.c: 59: RB5 = 1 ;
   818  0697  1283               	bcf	3,5	;RP0=0, select bank0
   819  0698  1303               	bcf	3,6	;RP1=0, select bank0
   820  0699  1686               	bsf	6,5	;volatile
   821                           
   822                           ;LCD.c: 60: LCD_Data(High4>>4);
   823  069A  0873               	movf	LCD_Write_Char@High4,w
   824  069B  00F1               	movwf	??_LCD_Write_Char
   825  069C  3004               	movlw	4
   826  069D                     u195:	
   827  069D  1003               	clrc
   828  069E  0CF1               	rrf	??_LCD_Write_Char,f
   829  069F  3EFF               	addlw	-1
   830  06A0  1D03               	skipz
   831  06A1  2E9D               	goto	u195
   832  06A2  0871               	movf	??_LCD_Write_Char,w
   833  06A3  120A  118A  2650  120A  118A  	fcall	_LCD_Data
   834                           
   835                           ;LCD.c: 61: RB4 = 1 ;
   836  06A8  1283               	bcf	3,5	;RP0=0, select bank0
   837  06A9  1303               	bcf	3,6	;RP1=0, select bank0
   838  06AA  1606               	bsf	6,4	;volatile
   839                           
   840                           ;LCD.c: 62: _delay((unsigned long)((500)*(4000000/4000000.0)));
   841  06AB  30A6               	movlw	166
   842  06AC  00F1               	movwf	??_LCD_Write_Char
   843  06AD                     u317:	
   844  06AD  0BF1               	decfsz	??_LCD_Write_Char,f
   845  06AE  2EAD               	goto	u317
   846  06AF  0000               	nop
   847                           
   848                           ;LCD.c: 63: RB4 = 0 ;
   849  06B0  1283               	bcf	3,5	;RP0=0, select bank0
   850  06B1  1303               	bcf	3,6	;RP1=0, select bank0
   851  06B2  1206               	bcf	6,4	;volatile
   852                           
   853                           ;LCD.c: 64: _delay((unsigned long)((500)*(4000000/4000000.0)));
   854  06B3  30A6               	movlw	166
   855  06B4  00F1               	movwf	??_LCD_Write_Char
   856  06B5                     u327:	
   857  06B5  0BF1               	decfsz	??_LCD_Write_Char,f
   858  06B6  2EB5               	goto	u327
   859  06B7  0000               	nop
   860                           
   861                           ;LCD.c: 65: LCD_Data(Low4);
   862  06B8  0872               	movf	LCD_Write_Char@Low4,w
   863  06B9  120A  118A  2650  120A  118A  	fcall	_LCD_Data
   864                           
   865                           ;LCD.c: 66: RB4 = 1 ;
   866  06BE  1283               	bcf	3,5	;RP0=0, select bank0
   867  06BF  1303               	bcf	3,6	;RP1=0, select bank0
   868  06C0  1606               	bsf	6,4	;volatile
   869                           
   870                           ;LCD.c: 67: _delay((unsigned long)((500)*(4000000/4000000.0)));
   871  06C1  30A6               	movlw	166
   872  06C2  00F1               	movwf	??_LCD_Write_Char
   873  06C3                     u337:	
   874  06C3  0BF1               	decfsz	??_LCD_Write_Char,f
   875  06C4  2EC3               	goto	u337
   876  06C5  0000               	nop
   877                           
   878                           ;LCD.c: 68: RB4 = 0 ;
   879  06C6  1283               	bcf	3,5	;RP0=0, select bank0
   880  06C7  1303               	bcf	3,6	;RP1=0, select bank0
   881  06C8  1206               	bcf	6,4	;volatile
   882                           
   883                           ;LCD.c: 69: _delay((unsigned long)((500)*(4000000/4000000.0)));
   884  06C9  30A6               	movlw	166
   885  06CA  00F1               	movwf	??_LCD_Write_Char
   886  06CB                     u347:	
   887  06CB  0BF1               	decfsz	??_LCD_Write_Char,f
   888  06CC  2ECB               	goto	u347
   889  06CD  0000               	nop
   890  06CE  0008               	return
   891  06CF                     __end_of_LCD_Write_Char:	
   892                           
   893                           	psect	text4
   894  062F                     __ptext4:	
   895 ;; *************** function _LCD_SL *****************
   896 ;; Defined at:
   897 ;;		line 102 in file "LCD.c"
   898 ;; Parameters:    Size  Location     Type
   899 ;;		None
   900 ;; Auto vars:     Size  Location     Type
   901 ;;		None
   902 ;; Return value:  Size  Location     Type
   903 ;;                  1    wreg      void 
   904 ;; Registers used:
   905 ;;		wreg, status,2, status,0, pclath, cstack
   906 ;; Tracked objects:
   907 ;;		On entry : 0/0
   908 ;;		On exit  : 0/0
   909 ;;		Unchanged: 0/0
   910 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   911 ;;      Params:         0       0       0       0       0
   912 ;;      Locals:         0       0       0       0       0
   913 ;;      Temps:          0       0       0       0       0
   914 ;;      Totals:         0       0       0       0       0
   915 ;;Total ram usage:        0 bytes
   916 ;; Hardware stack levels used:    1
   917 ;; Hardware stack levels required when called:    2
   918 ;; This function calls:
   919 ;;		_LCD_Command
   920 ;; This function is called by:
   921 ;;		_main
   922 ;; This function uses a non-reentrant model
   923 ;;
   924                           
   925                           
   926                           ;psect for function _LCD_SL
   927  062F                     _LCD_SL:	
   928                           
   929                           ;LCD.c: 103: LCD_Command(0x01);
   930                           
   931                           ;incstack = 0
   932                           ; Regs used in _LCD_SL: [wreg+status,2+status,0+pclath+cstack]
   933  062F  3001               	movlw	1
   934  0630  120A  118A  263A  120A  118A  	fcall	_LCD_Command
   935                           
   936                           ;LCD.c: 104: LCD_Command(0x08);
   937  0635  3008               	movlw	8
   938  0636  120A  118A  263A   	fcall	_LCD_Command
   939  0639  0008               	return
   940  063A                     __end_of_LCD_SL:	
   941                           
   942                           	psect	text5
   943  0624                     __ptext5:	
   944 ;; *************** function _LCD_RL *****************
   945 ;; Defined at:
   946 ;;		line 107 in file "LCD.c"
   947 ;; Parameters:    Size  Location     Type
   948 ;;		None
   949 ;; Auto vars:     Size  Location     Type
   950 ;;		None
   951 ;; Return value:  Size  Location     Type
   952 ;;                  1    wreg      void 
   953 ;; Registers used:
   954 ;;		wreg, status,2, status,0, pclath, cstack
   955 ;; Tracked objects:
   956 ;;		On entry : 0/0
   957 ;;		On exit  : 0/0
   958 ;;		Unchanged: 0/0
   959 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   960 ;;      Params:         0       0       0       0       0
   961 ;;      Locals:         0       0       0       0       0
   962 ;;      Temps:          0       0       0       0       0
   963 ;;      Totals:         0       0       0       0       0
   964 ;;Total ram usage:        0 bytes
   965 ;; Hardware stack levels used:    1
   966 ;; Hardware stack levels required when called:    2
   967 ;; This function calls:
   968 ;;		_LCD_Command
   969 ;; This function is called by:
   970 ;;		_main
   971 ;; This function uses a non-reentrant model
   972 ;;
   973                           
   974                           
   975                           ;psect for function _LCD_RL
   976  0624                     _LCD_RL:	
   977                           
   978                           ;LCD.c: 108: LCD_Command(0x01);
   979                           
   980                           ;incstack = 0
   981                           ; Regs used in _LCD_RL: [wreg+status,2+status,0+pclath+cstack]
   982  0624  3001               	movlw	1
   983  0625  120A  118A  263A  120A  118A  	fcall	_LCD_Command
   984                           
   985                           ;LCD.c: 109: LCD_Command(0x0C);
   986  062A  300C               	movlw	12
   987  062B  120A  118A  263A   	fcall	_LCD_Command
   988  062E  0008               	return
   989  062F                     __end_of_LCD_RL:	
   990                           
   991                           	psect	text6
   992  071A                     __ptext6:	
   993 ;; *************** function _LCD_Init *****************
   994 ;; Defined at:
   995 ;;		line 3 in file "LCD.c"
   996 ;; Parameters:    Size  Location     Type
   997 ;;		None
   998 ;; Auto vars:     Size  Location     Type
   999 ;;		None
  1000 ;; Return value:  Size  Location     Type
  1001 ;;                  1    wreg      void 
  1002 ;; Registers used:
  1003 ;;		wreg, status,2, status,0, pclath, cstack
  1004 ;; Tracked objects:
  1005 ;;		On entry : 0/0
  1006 ;;		On exit  : 0/0
  1007 ;;		Unchanged: 0/0
  1008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1009 ;;      Params:         0       0       0       0       0
  1010 ;;      Locals:         0       0       0       0       0
  1011 ;;      Temps:          2       0       0       0       0
  1012 ;;      Totals:         2       0       0       0       0
  1013 ;;Total ram usage:        2 bytes
  1014 ;; Hardware stack levels used:    1
  1015 ;; Hardware stack levels required when called:    2
  1016 ;; This function calls:
  1017 ;;		_LCD_Command
  1018 ;;		_LCD_Data
  1019 ;; This function is called by:
  1020 ;;		_main
  1021 ;; This function uses a non-reentrant model
  1022 ;;
  1023                           
  1024                           
  1025                           ;psect for function _LCD_Init
  1026  071A                     _LCD_Init:	
  1027                           
  1028                           ;LCD.c: 5: TRISB = 0x00 ;
  1029                           
  1030                           ;incstack = 0
  1031                           ; Regs used in _LCD_Init: [wreg+status,2+status,0+pclath+cstack]
  1032  071A  1683               	bsf	3,5	;RP0=1, select bank1
  1033  071B  1303               	bcf	3,6	;RP1=0, select bank1
  1034  071C  0186               	clrf	6	;volatile
  1035                           
  1036                           ;LCD.c: 6: TRISB4 = 0 ;
  1037  071D  1206               	bcf	6,4	;volatile
  1038                           
  1039                           ;LCD.c: 7: TRISB5 =0 ;
  1040  071E  1286               	bcf	6,5	;volatile
  1041                           
  1042                           ;LCD.c: 9: LCD_Data(0x00);
  1043  071F  3000               	movlw	0
  1044  0720  120A  118A  2650  120A  118A  	fcall	_LCD_Data
  1045                           
  1046                           ;LCD.c: 10: _delay((unsigned long)((30)*(4000000/4000.0)));
  1047  0725  3027               	movlw	39
  1048  0726  00F4               	movwf	??_LCD_Init+1
  1049  0727  30F5               	movlw	245
  1050  0728  00F3               	movwf	??_LCD_Init
  1051  0729                     u357:	
  1052  0729  0BF3               	decfsz	??_LCD_Init,f
  1053  072A  2F29               	goto	u357
  1054  072B  0BF4               	decfsz	??_LCD_Init+1,f
  1055  072C  2F29               	goto	u357
  1056                           
  1057                           ;LCD.c: 11: _delay((unsigned long)((500)*(4000000/4000000.0)));
  1058  072D  30A6               	movlw	166
  1059  072E  00F3               	movwf	??_LCD_Init
  1060  072F                     u367:	
  1061  072F  0BF3               	decfsz	??_LCD_Init,f
  1062  0730  2F2F               	goto	u367
  1063  0731  0000               	nop
  1064                           
  1065                           ;LCD.c: 12: LCD_Command(0x03);
  1066  0732  3003               	movlw	3
  1067  0733  120A  118A  263A  120A  118A  	fcall	_LCD_Command
  1068                           
  1069                           ;LCD.c: 13: _delay((unsigned long)((5)*(4000000/4000.0)));
  1070  0738  3007               	movlw	7
  1071  0739  00F4               	movwf	??_LCD_Init+1
  1072  073A  307D               	movlw	125
  1073  073B  00F3               	movwf	??_LCD_Init
  1074  073C                     u377:	
  1075  073C  0BF3               	decfsz	??_LCD_Init,f
  1076  073D  2F3C               	goto	u377
  1077  073E  0BF4               	decfsz	??_LCD_Init+1,f
  1078  073F  2F3C               	goto	u377
  1079                           
  1080                           ;LCD.c: 14: LCD_Command(0x03);
  1081  0740  3003               	movlw	3
  1082  0741  120A  118A  263A  120A  118A  	fcall	_LCD_Command
  1083                           
  1084                           ;LCD.c: 15: _delay((unsigned long)((120)*(4000000/4000000.0))) ;
  1085  0746  3027               	movlw	39
  1086  0747  00F3               	movwf	??_LCD_Init
  1087  0748                     u387:	
  1088  0748  0BF3               	decfsz	??_LCD_Init,f
  1089  0749  2F48               	goto	u387
  1090  074A  2F4B               	nop2
  1091                           
  1092                           ;LCD.c: 16: LCD_Command(0x03);
  1093  074B  3003               	movlw	3
  1094  074C  120A  118A  263A  120A  118A  	fcall	_LCD_Command
  1095                           
  1096                           ;LCD.c: 17: LCD_Command(0x02);
  1097  0751  3002               	movlw	2
  1098  0752  120A  118A  263A  120A  118A  	fcall	_LCD_Command
  1099                           
  1100                           ;LCD.c: 18: LCD_Command(0x02);
  1101  0757  3002               	movlw	2
  1102  0758  120A  118A  263A  120A  118A  	fcall	_LCD_Command
  1103                           
  1104                           ;LCD.c: 19: LCD_Command(0x08);
  1105  075D  3008               	movlw	8
  1106  075E  120A  118A  263A  120A  118A  	fcall	_LCD_Command
  1107                           
  1108                           ;LCD.c: 20: LCD_Command(0x00);
  1109  0763  3000               	movlw	0
  1110  0764  120A  118A  263A  120A  118A  	fcall	_LCD_Command
  1111                           
  1112                           ;LCD.c: 21: LCD_Command(0x0C);
  1113  0769  300C               	movlw	12
  1114  076A  120A  118A  263A  120A  118A  	fcall	_LCD_Command
  1115                           
  1116                           ;LCD.c: 22: LCD_Command(0x00);
  1117  076F  3000               	movlw	0
  1118  0770  120A  118A  263A  120A  118A  	fcall	_LCD_Command
  1119                           
  1120                           ;LCD.c: 23: LCD_Command(0x06);
  1121  0775  3006               	movlw	6
  1122  0776  120A  118A  263A   	fcall	_LCD_Command
  1123  0779  0008               	return
  1124  077A                     __end_of_LCD_Init:	
  1125                           
  1126                           	psect	text7
  1127  0619                     __ptext7:	
  1128 ;; *************** function _LCD_Clear *****************
  1129 ;; Defined at:
  1130 ;;		line 98 in file "LCD.c"
  1131 ;; Parameters:    Size  Location     Type
  1132 ;;		None
  1133 ;; Auto vars:     Size  Location     Type
  1134 ;;		None
  1135 ;; Return value:  Size  Location     Type
  1136 ;;                  1    wreg      void 
  1137 ;; Registers used:
  1138 ;;		wreg, status,2, status,0, pclath, cstack
  1139 ;; Tracked objects:
  1140 ;;		On entry : 0/0
  1141 ;;		On exit  : 0/0
  1142 ;;		Unchanged: 0/0
  1143 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1144 ;;      Params:         0       0       0       0       0
  1145 ;;      Locals:         0       0       0       0       0
  1146 ;;      Temps:          0       0       0       0       0
  1147 ;;      Totals:         0       0       0       0       0
  1148 ;;Total ram usage:        0 bytes
  1149 ;; Hardware stack levels used:    1
  1150 ;; Hardware stack levels required when called:    2
  1151 ;; This function calls:
  1152 ;;		_LCD_Command
  1153 ;; This function is called by:
  1154 ;;		_main
  1155 ;; This function uses a non-reentrant model
  1156 ;;
  1157                           
  1158                           
  1159                           ;psect for function _LCD_Clear
  1160  0619                     _LCD_Clear:	
  1161                           
  1162                           ;LCD.c: 99: LCD_Command(0);
  1163                           
  1164                           ;incstack = 0
  1165                           ; Regs used in _LCD_Clear: [wreg+status,2+status,0+pclath+cstack]
  1166  0619  3000               	movlw	0
  1167  061A  120A  118A  263A  120A  118A  	fcall	_LCD_Command
  1168                           
  1169                           ;LCD.c: 100: LCD_Command(1);
  1170  061F  3001               	movlw	1
  1171  0620  120A  118A  263A   	fcall	_LCD_Command
  1172  0623  0008               	return
  1173  0624                     __end_of_LCD_Clear:	
  1174                           
  1175                           	psect	text8
  1176  063A                     __ptext8:	
  1177 ;; *************** function _LCD_Command *****************
  1178 ;; Defined at:
  1179 ;;		line 45 in file "LCD.c"
  1180 ;; Parameters:    Size  Location     Type
  1181 ;;  command         1    wreg     unsigned char 
  1182 ;; Auto vars:     Size  Location     Type
  1183 ;;  command         1    2[COMMON] unsigned char 
  1184 ;; Return value:  Size  Location     Type
  1185 ;;                  1    wreg      void 
  1186 ;; Registers used:
  1187 ;;		wreg, status,2, status,0, pclath, cstack
  1188 ;; Tracked objects:
  1189 ;;		On entry : 0/0
  1190 ;;		On exit  : 0/0
  1191 ;;		Unchanged: 0/0
  1192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1193 ;;      Params:         0       0       0       0       0
  1194 ;;      Locals:         1       0       0       0       0
  1195 ;;      Temps:          1       0       0       0       0
  1196 ;;      Totals:         2       0       0       0       0
  1197 ;;Total ram usage:        2 bytes
  1198 ;; Hardware stack levels used:    1
  1199 ;; Hardware stack levels required when called:    1
  1200 ;; This function calls:
  1201 ;;		_LCD_Data
  1202 ;; This function is called by:
  1203 ;;		_LCD_Init
  1204 ;;		_LCD_set_cursor
  1205 ;;		_LCD_Clear
  1206 ;;		_LCD_SL
  1207 ;;		_LCD_RL
  1208 ;; This function uses a non-reentrant model
  1209 ;;
  1210                           
  1211                           
  1212                           ;psect for function _LCD_Command
  1213  063A                     _LCD_Command:	
  1214                           
  1215                           ;incstack = 0
  1216                           ; Regs used in _LCD_Command: [wreg+status,2+status,0+pclath+cstack]
  1217                           ;LCD_Command@command stored from wreg
  1218  063A  00F2               	movwf	LCD_Command@command
  1219                           
  1220                           ;LCD.c: 47: RB5 = 0 ;
  1221  063B  1283               	bcf	3,5	;RP0=0, select bank0
  1222  063C  1303               	bcf	3,6	;RP1=0, select bank0
  1223  063D  1286               	bcf	6,5	;volatile
  1224                           
  1225                           ;LCD.c: 48: LCD_Data(command) ;
  1226  063E  0872               	movf	LCD_Command@command,w
  1227  063F  120A  118A  2650  120A  118A  	fcall	_LCD_Data
  1228                           
  1229                           ;LCD.c: 50: RB4 = 1 ;
  1230  0644  1283               	bcf	3,5	;RP0=0, select bank0
  1231  0645  1303               	bcf	3,6	;RP1=0, select bank0
  1232  0646  1606               	bsf	6,4	;volatile
  1233                           
  1234                           ;LCD.c: 51: _delay((unsigned long)((500)*(4000000/4000000.0))) ;
  1235  0647  30A6               	movlw	166
  1236  0648  00F1               	movwf	??_LCD_Command
  1237  0649                     u397:	
  1238  0649  0BF1               	decfsz	??_LCD_Command,f
  1239  064A  2E49               	goto	u397
  1240  064B  0000               	nop
  1241                           
  1242                           ;LCD.c: 52: RB4 = 0 ;
  1243  064C  1283               	bcf	3,5	;RP0=0, select bank0
  1244  064D  1303               	bcf	3,6	;RP1=0, select bank0
  1245  064E  1206               	bcf	6,4	;volatile
  1246  064F  0008               	return
  1247  0650                     __end_of_LCD_Command:	
  1248                           
  1249                           	psect	text9
  1250  0650                     __ptext9:	
  1251 ;; *************** function _LCD_Data *****************
  1252 ;; Defined at:
  1253 ;;		line 26 in file "LCD.c"
  1254 ;; Parameters:    Size  Location     Type
  1255 ;;  Data            1    wreg     unsigned char 
  1256 ;; Auto vars:     Size  Location     Type
  1257 ;;  Data            1    0[COMMON] unsigned char 
  1258 ;; Return value:  Size  Location     Type
  1259 ;;                  1    wreg      void 
  1260 ;; Registers used:
  1261 ;;		wreg
  1262 ;; Tracked objects:
  1263 ;;		On entry : 0/0
  1264 ;;		On exit  : 0/0
  1265 ;;		Unchanged: 0/0
  1266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1267 ;;      Params:         0       0       0       0       0
  1268 ;;      Locals:         1       0       0       0       0
  1269 ;;      Temps:          0       0       0       0       0
  1270 ;;      Totals:         1       0       0       0       0
  1271 ;;Total ram usage:        1 bytes
  1272 ;; Hardware stack levels used:    1
  1273 ;; This function calls:
  1274 ;;		Nothing
  1275 ;; This function is called by:
  1276 ;;		_LCD_Init
  1277 ;;		_LCD_Command
  1278 ;;		_LCD_Write_Char
  1279 ;; This function uses a non-reentrant model
  1280 ;;
  1281                           
  1282                           
  1283                           ;psect for function _LCD_Data
  1284  0650                     _LCD_Data:	
  1285                           
  1286                           ;incstack = 0
  1287                           ; Regs used in _LCD_Data: [wreg]
  1288                           ;LCD_Data@Data stored from wreg
  1289  0650  00F0               	movwf	LCD_Data@Data
  1290                           
  1291                           ;LCD.c: 28: if (Data & 1)
  1292  0651  1C70               	btfss	LCD_Data@Data,0
  1293  0652  2E57               	goto	l30
  1294                           
  1295                           ;LCD.c: 29: RB0 = 1 ;
  1296  0653  1283               	bcf	3,5	;RP0=0, select bank0
  1297  0654  1303               	bcf	3,6	;RP1=0, select bank0
  1298  0655  1406               	bsf	6,0	;volatile
  1299  0656  2E5A               	goto	l31
  1300  0657                     l30:	
  1301                           
  1302                           ;LCD.c: 30: else
  1303                           ;LCD.c: 31: RB0 = 0 ;
  1304  0657  1283               	bcf	3,5	;RP0=0, select bank0
  1305  0658  1303               	bcf	3,6	;RP1=0, select bank0
  1306  0659  1006               	bcf	6,0	;volatile
  1307  065A                     l31:	
  1308                           
  1309                           ;LCD.c: 32: if (Data & 2 )
  1310  065A  1CF0               	btfss	LCD_Data@Data,1
  1311  065B  2E5E               	goto	l32
  1312                           
  1313                           ;LCD.c: 33: RB1 =1 ;
  1314  065C  1486               	bsf	6,1	;volatile
  1315  065D  2E5F               	goto	l33
  1316  065E                     l32:	
  1317                           
  1318                           ;LCD.c: 34: else
  1319                           ;LCD.c: 35: RB1 = 0 ;
  1320  065E  1086               	bcf	6,1	;volatile
  1321  065F                     l33:	
  1322                           
  1323                           ;LCD.c: 36: if (Data & 4)
  1324  065F  1D70               	btfss	LCD_Data@Data,2
  1325  0660  2E63               	goto	l34
  1326                           
  1327                           ;LCD.c: 37: RB2 = 1 ;
  1328  0661  1506               	bsf	6,2	;volatile
  1329  0662  2E64               	goto	l35
  1330  0663                     l34:	
  1331                           
  1332                           ;LCD.c: 38: else
  1333                           ;LCD.c: 39: RB2 =0 ;
  1334  0663  1106               	bcf	6,2	;volatile
  1335  0664                     l35:	
  1336                           
  1337                           ;LCD.c: 40: if (Data & 8)
  1338  0664  1DF0               	btfss	LCD_Data@Data,3
  1339  0665  2E68               	goto	l36
  1340                           
  1341                           ;LCD.c: 41: RB3 = 1 ;
  1342  0666  1586               	bsf	6,3	;volatile
  1343  0667  0008               	return
  1344  0668                     l36:	
  1345                           
  1346                           ;LCD.c: 42: else
  1347                           ;LCD.c: 43: RB3 = 0;
  1348  0668  1186               	bcf	6,3	;volatile
  1349  0669  0008               	return
  1350  066A                     __end_of_LCD_Data:	
  1351  007E                     btemp	set	126	;btemp
  1352  007E                     wtemp0	set	126


Data Sizes:
    Strings     30
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      13
    BANK0            80      4       4
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    LCD_Write_String@Str	PTR unsigned char  size(1) Largest target is 17
		 -> STR_2(CODE[13]), STR_1(CODE[17]), 


Critical Paths under _main in COMMON

    _main->_LCD_set_cursor
    _LCD_set_cursor->_LCD_Command
    _LCD_Write_String->_LCD_Write_Char
    _LCD_Write_Char->_LCD_Data
    _LCD_SL->_LCD_Command
    _LCD_RL->_LCD_Command
    _LCD_Init->_LCD_Command
    _LCD_Clear->_LCD_Command
    _LCD_Command->_LCD_Data

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0    1428
                                             10 COMMON     3     3      0
                                              0 BANK0      4     4      0
                          _LCD_Clear
                           _LCD_Init
                             _LCD_RL
                             _LCD_SL
                   _LCD_Write_String
                     _LCD_set_cursor
 ---------------------------------------------------------------------------------
 (1) _LCD_set_cursor                                       7     6      1     486
                                              3 COMMON     7     6      1
                        _LCD_Command
 ---------------------------------------------------------------------------------
 (1) _LCD_Write_String                                     3     3      0     322
                                              5 COMMON     3     3      0
                     _LCD_Write_Char
 ---------------------------------------------------------------------------------
 (2) _LCD_Write_Char                                       4     4      0     178
                                              1 COMMON     4     4      0
                           _LCD_Data
 ---------------------------------------------------------------------------------
 (1) _LCD_SL                                               0     0      0     110
                        _LCD_Command
 ---------------------------------------------------------------------------------
 (1) _LCD_RL                                               0     0      0     110
                        _LCD_Command
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             2     2      0     198
                                              3 COMMON     2     2      0
                        _LCD_Command
                           _LCD_Data
 ---------------------------------------------------------------------------------
 (1) _LCD_Clear                                            0     0      0     110
                        _LCD_Command
 ---------------------------------------------------------------------------------
 (2) _LCD_Command                                          2     2      0     110
                                              1 COMMON     2     2      0
                           _LCD_Data
 ---------------------------------------------------------------------------------
 (3) _LCD_Data                                             1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_Clear
     _LCD_Command
       _LCD_Data
   _LCD_Init
     _LCD_Command
       _LCD_Data
     _LCD_Data
   _LCD_RL
     _LCD_Command
       _LCD_Data
   _LCD_SL
     _LCD_Command
       _LCD_Data
   _LCD_Write_String
     _LCD_Write_Char
       _LCD_Data
   _LCD_set_cursor
     _LCD_Command
       _LCD_Data

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      D       D       1       92.9%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      4       4       5        5.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Wed Jul 15 23:10:43 2020

                        pc 0002                __CFG_CP$OFF 0000               ?_LCD_Command 0070  
                       l30 0657                         l31 065A                         l32 065E  
                       l33 065F                         l34 0663                         l35 0664  
                       l36 0668                         fsr 0004                        l830 07D3  
                      l822 07AF                        l816 07A0                        l782 066D  
                      l794 06F5                        _RB0 0030                        _RB1 0031  
                      _RB2 0032                        _RB3 0033                        _RB4 0034  
                      _RB5 0035                        u225 06DB                        u307 07E8  
                      u317 06AD                        u245 0701                        u327 06B5  
                      u255 07AD                        u337 06C3                        u265 07D1  
             __CFG_CPD$OFF 0000                        u347 06CB                        u195 069D  
                      u275 07E0                        u357 0729                        u367 072F  
                      u377 073C                        u297 07B5                        u387 0748  
                      u397 0649                        fsr0 0004               __CFG_FOSC$XT 0000  
             __CFG_LVP$OFF 0000        LCD_Write_String@Str 0077                       STR_1 0009  
                     STR_2 001A               __CFG_WRT$OFF 0000          ?_LCD_Write_String 0070  
                     _main 077A         __size_of_LCD_Clear 000B                       btemp 007E  
            __CFG_BOREN$ON 0000                       start 0000         ??_LCD_Write_String 0075  
             LCD_Data@Data 0070           __end_of_LCD_Data 066A           __end_of_LCD_Init 077A  
                    ?_main 0070              __CFG_WDTE$OFF 0000                      _TRISB 0086  
            __CFG_PWRTE$ON 0000                      main@i 0020                      pclath 000A  
                    status 0003                      wtemp0 007E    __size_of_LCD_set_cursor 004B  
           _LCD_Write_Char 068C            __initialization 07FC               __end_of_main 07FC  
       LCD_set_cursor@low4 0078                     ??_main 007A         LCD_set_cursor@temp 0079  
        __end_of_LCD_Clear 0624                     _LCD_RL 0624                     _LCD_SL 062F  
                   _TRISB4 0434                     _TRISB5 0435     __end_of_LCD_Write_Char 06CF  
     __size_of_LCD_Command 0016         LCD_Command@command 0072                  ?_LCD_Data 0070  
  __end_of__initialization 07FC                  ?_LCD_Init 0070            ?_LCD_Write_Char 0070  
           __pcstackCOMMON 0070        LCD_set_cursor@high4 0077                    ?_LCD_RL 0070  
                  ?_LCD_SL 0070                 ??_LCD_Data 0070                 ??_LCD_Init 0073  
           _LCD_set_cursor 06CF                 __pmaintext 077A  __size_of_LCD_Write_String 0022  
               __stringtab 0003            __size_of_LCD_RL 000B            __size_of_LCD_SL 000B  
   __end_of_LCD_set_cursor 071A            LCD_set_cursor@c 0073            LCD_set_cursor@r 0076  
                  __ptext1 06CF                    __ptext2 066A                    __ptext3 068C  
                  __ptext4 062F                    __ptext5 0624                    __ptext6 071A  
                  __ptext7 0619                    __ptext8 063A                    __ptext9 0650  
                _LCD_Clear 0619       end_of_initialization 07FC            ?_LCD_set_cursor 0073  
               ?_LCD_Clear 0070          LCD_Write_String@i 0075           ??_LCD_Write_Char 0071  
           __end_of_LCD_RL 062F             __end_of_LCD_SL 063A          __size_of_LCD_Data 001A  
        __size_of_LCD_Init 0060              ??_LCD_Command 0071           _LCD_Write_String 066A  
      start_initialization 07FC                   ??_LCD_RL 0073                   ??_LCD_SL 0073  
      __end_of_LCD_Command 0650                  ___latbits 0002              __pcstackBANK0 0020  
              ??_LCD_Clear 0073                  __pstrings 0003           ??_LCD_set_cursor 0074  
                 _LCD_Data 0650                   _LCD_Init 071A                _LCD_Command 063A  
              __stringbase 0008   __end_of_LCD_Write_String 068C        LCD_Write_Char@High4 0073  
       __end_of__stringtab 0009              __size_of_main 0082                   main@i_83 0022  
       LCD_Write_Char@Data 0074         LCD_Write_Char@Low4 0072                  stringcode 0003  
  __size_of_LCD_Write_Char 0043                   stringdir 0003                   stringtab 0003  
