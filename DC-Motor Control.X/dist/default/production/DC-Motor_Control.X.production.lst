

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Sun Jun 14 14:50:27 2020

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	maintext,global,class=CODE,split=1,delta=2
     7                           	psect	text1,local,class=CODE,merge=1,delta=2
     8                           	dabs	1,0x7E,2
     9  0000                     
    10                           ; Version 1.41
    11                           ; Generated 25/01/2017 GMT
    12                           ; 
    13                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    14                           ; All rights reserved.
    15                           ; 
    16                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    17                           ; 
    18                           ; Redistribution and use in source and binary forms, with or without modification, are
    19                           ; permitted provided that the following conditions are met:
    20                           ; 
    21                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    22                           ;        conditions and the following disclaimer.
    23                           ; 
    24                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    25                           ;        of conditions and the following disclaimer in the documentation and/or other
    26                           ;        materials provided with the distribution.
    27                           ; 
    28                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    29                           ;        software without specific prior written permission.
    30                           ; 
    31                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    32                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    33                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    34                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    35                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    36                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    37                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    38                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    39                           ; 
    40                           ; 
    41                           ; Code-generator required, PIC16F877A Definitions
    42                           ; 
    43                           ; SFR Addresses
    44  0000                     	;# 
    45  0001                     	;# 
    46  0002                     	;# 
    47  0003                     	;# 
    48  0004                     	;# 
    49  0005                     	;# 
    50  0006                     	;# 
    51  0007                     	;# 
    52  0008                     	;# 
    53  0009                     	;# 
    54  000A                     	;# 
    55  000B                     	;# 
    56  000C                     	;# 
    57  000D                     	;# 
    58  000E                     	;# 
    59  000E                     	;# 
    60  000F                     	;# 
    61  0010                     	;# 
    62  0011                     	;# 
    63  0012                     	;# 
    64  0013                     	;# 
    65  0014                     	;# 
    66  0015                     	;# 
    67  0015                     	;# 
    68  0016                     	;# 
    69  0017                     	;# 
    70  0018                     	;# 
    71  0019                     	;# 
    72  001A                     	;# 
    73  001B                     	;# 
    74  001B                     	;# 
    75  001C                     	;# 
    76  001D                     	;# 
    77  001E                     	;# 
    78  001F                     	;# 
    79  0081                     	;# 
    80  0085                     	;# 
    81  0086                     	;# 
    82  0087                     	;# 
    83  0088                     	;# 
    84  0089                     	;# 
    85  008C                     	;# 
    86  008D                     	;# 
    87  008E                     	;# 
    88  0091                     	;# 
    89  0092                     	;# 
    90  0093                     	;# 
    91  0094                     	;# 
    92  0098                     	;# 
    93  0099                     	;# 
    94  009C                     	;# 
    95  009D                     	;# 
    96  009E                     	;# 
    97  009F                     	;# 
    98  010C                     	;# 
    99  010D                     	;# 
   100  010E                     	;# 
   101  010F                     	;# 
   102  018C                     	;# 
   103  018D                     	;# 
   104  0015                     _CCPR1L	set	21
   105  00BD                     _CCP1X	set	189
   106  00BC                     _CCP1Y	set	188
   107  0034                     _RB4	set	52
   108  0033                     _RB3	set	51
   109  0032                     _RB2	set	50
   110  0031                     _RB1	set	49
   111  0030                     _RB0	set	48
   112  0092                     _TMR2ON	set	146
   113  0091                     _T2CKPS1	set	145
   114  0090                     _T2CKPS0	set	144
   115  00BA                     _CCP1M2	set	186
   116  00BB                     _CCP1M3	set	187
   117  0041                     _RD1	set	65
   118  0040                     _RD0	set	64
   119  0092                     _PR2	set	146
   120  0086                     _TRISB	set	134
   121  043A                     _TRISC2	set	1082
   122  0441                     _TRISD1	set	1089
   123  0440                     _TRISD0	set	1088
   124                           
   125                           ; #config settings
   126  0000                     
   127                           	psect	cinit
   128  07FC                     start_initialization:	
   129  07FC                     __initialization:	
   130  07FC                     end_of_initialization:	
   131                           ;End of C runtime variable initialization code
   132                           
   133  07FC                     __end_of__initialization:	
   134  07FC  0183               	clrf	3
   135  07FD  120A  118A  2F6C   	ljmp	_main	;jump to C main() function
   136                           
   137                           	psect	cstackCOMMON
   138  0070                     __pcstackCOMMON:	
   139  0070                     ?_set_duty_cycle:	
   140  0070                     ?_main:	
   141                           ; 1 bytes @ 0x0
   142                           
   143  0070                     set_duty_cycle@DC:	
   144                           ; 1 bytes @ 0x0
   145                           
   146                           
   147                           ; 2 bytes @ 0x0
   148  0070                     	ds	2
   149  0072                     ??_set_duty_cycle:	
   150                           
   151                           ; 1 bytes @ 0x2
   152  0072                     	ds	2
   153  0074                     ??_main:	
   154                           
   155                           ; 1 bytes @ 0x4
   156  0074                     	ds	3
   157                           
   158                           	psect	maintext
   159  076C                     __pmaintext:	
   160 ;;
   161 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   162 ;;
   163 ;; *************** function _main *****************
   164 ;; Defined at:
   165 ;;		line 20 in file "main.c"
   166 ;; Parameters:    Size  Location     Type
   167 ;;		None
   168 ;; Auto vars:     Size  Location     Type
   169 ;;		None
   170 ;; Return value:  Size  Location     Type
   171 ;;                  1    wreg      void 
   172 ;; Registers used:
   173 ;;		wreg, status,2, status,0, pclath, cstack
   174 ;; Tracked objects:
   175 ;;		On entry : B00/0
   176 ;;		On exit  : 0/0
   177 ;;		Unchanged: 0/0
   178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   179 ;;      Params:         0       0       0       0       0
   180 ;;      Locals:         0       0       0       0       0
   181 ;;      Temps:          3       0       0       0       0
   182 ;;      Totals:         3       0       0       0       0
   183 ;;Total ram usage:        3 bytes
   184 ;; Hardware stack levels required when called:    1
   185 ;; This function calls:
   186 ;;		_set_duty_cycle
   187 ;; This function is called by:
   188 ;;		Startup code after reset
   189 ;; This function uses a non-reentrant model
   190 ;;
   191                           
   192                           
   193                           ;psect for function _main
   194  076C                     _main:	
   195                           
   196                           ;main.c: 22: TRISB=0x1F;
   197                           
   198                           ;incstack = 0
   199                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   200  076C  301F               	movlw	31
   201  076D  1683               	bsf	3,5	;RP0=1, select bank1
   202  076E  1303               	bcf	3,6	;RP1=0, select bank1
   203  076F  0086               	movwf	6	;volatile
   204                           
   205                           ;main.c: 24: TRISD0=0;
   206  0770  1008               	bcf	8,0	;volatile
   207                           
   208                           ;main.c: 25: RD0=0;
   209  0771  1283               	bcf	3,5	;RP0=0, select bank0
   210  0772  1303               	bcf	3,6	;RP1=0, select bank0
   211  0773  1008               	bcf	8,0	;volatile
   212                           
   213                           ;main.c: 26: TRISD1=0;
   214  0774  1683               	bsf	3,5	;RP0=1, select bank1
   215  0775  1303               	bcf	3,6	;RP1=0, select bank1
   216  0776  1088               	bcf	8,1	;volatile
   217                           
   218                           ;main.c: 27: RD1=1;
   219  0777  1283               	bcf	3,5	;RP0=0, select bank0
   220  0778  1303               	bcf	3,6	;RP1=0, select bank0
   221  0779  1488               	bsf	8,1	;volatile
   222                           
   223                           ;main.c: 29: CCP1M3=1;
   224  077A  1597               	bsf	23,3	;volatile
   225                           
   226                           ;main.c: 30: CCP1M2=1;
   227  077B  1517               	bsf	23,2	;volatile
   228                           
   229                           ;main.c: 32: TRISC2=0;
   230  077C  1683               	bsf	3,5	;RP0=1, select bank1
   231  077D  1303               	bcf	3,6	;RP1=0, select bank1
   232  077E  1107               	bcf	7,2	;volatile
   233                           
   234                           ;main.c: 34: PR2=124;
   235  077F  307C               	movlw	124
   236  0780  0092               	movwf	18	;volatile
   237                           
   238                           ;main.c: 36: T2CKPS0=1;
   239  0781  1283               	bcf	3,5	;RP0=0, select bank0
   240  0782  1303               	bcf	3,6	;RP1=0, select bank0
   241  0783  1412               	bsf	18,0	;volatile
   242                           
   243                           ;main.c: 37: T2CKPS1=0;
   244  0784  1092               	bcf	18,1	;volatile
   245                           
   246                           ;main.c: 38: TMR2ON=1;
   247  0785  1512               	bsf	18,2	;volatile
   248  0786                     l605:	
   249                           ;main.c: 40: while (1) {
   250                           
   251                           
   252                           ;main.c: 41: if (RB0)
   253  0786  1283               	bcf	3,5	;RP0=0, select bank0
   254  0787  1303               	bcf	3,6	;RP1=0, select bank0
   255  0788  1C06               	btfss	6,0	;volatile
   256  0789  2F9B               	goto	l609
   257                           
   258                           ;main.c: 42: {
   259                           ;main.c: 43: RD0 = ~ RD0 ;
   260  078A  3001               	movlw	1
   261  078B  0688               	xorwf	8,f
   262                           
   263                           ;main.c: 44: RD1 = ~ RD1 ;
   264  078C  3002               	movlw	2
   265  078D  0688               	xorwf	8,f
   266                           
   267                           ;main.c: 45: _delay((unsigned long)((500)*(4000000/4000.0)));
   268  078E  3003               	movlw	3
   269  078F  00F6               	movwf	??_main+2
   270  0790  308A               	movlw	138
   271  0791  00F5               	movwf	??_main+1
   272  0792  3055               	movlw	85
   273  0793  00F4               	movwf	??_main
   274  0794                     u177:	
   275  0794  0BF4               	decfsz	??_main,f
   276  0795  2F94               	goto	u177
   277  0796  0BF5               	decfsz	??_main+1,f
   278  0797  2F94               	goto	u177
   279  0798  0BF6               	decfsz	??_main+2,f
   280  0799  2F94               	goto	u177
   281  079A  2F9B               	nop2
   282  079B                     l609:	
   283                           
   284                           ;main.c: 46: }
   285                           ;main.c: 47: if (RB1)
   286  079B  1283               	bcf	3,5	;RP0=0, select bank0
   287  079C  1303               	bcf	3,6	;RP1=0, select bank0
   288  079D  1C86               	btfss	6,1	;volatile
   289  079E  2FB0               	goto	l615
   290                           
   291                           ;main.c: 48: {
   292                           ;main.c: 49: set_duty_cycle(0);
   293  079F  3000               	movlw	0
   294  07A0  00F0               	movwf	set_duty_cycle@DC
   295  07A1  00F1               	movwf	set_duty_cycle@DC+1
   296  07A2  120A  118A  274E  120A  118A  	fcall	_set_duty_cycle
   297                           
   298                           ;main.c: 50: _delay((unsigned long)((100)*(4000000/4000.0)));
   299  07A7  3082               	movlw	130
   300  07A8  00F5               	movwf	??_main+1
   301  07A9  30DD               	movlw	221
   302  07AA  00F4               	movwf	??_main
   303  07AB                     u187:	
   304  07AB  0BF4               	decfsz	??_main,f
   305  07AC  2FAB               	goto	u187
   306  07AD  0BF5               	decfsz	??_main+1,f
   307  07AE  2FAB               	goto	u187
   308  07AF  2FB0               	nop2
   309  07B0                     l615:	
   310                           
   311                           ;main.c: 52: }
   312                           ;main.c: 53: if (RB2)
   313  07B0  1283               	bcf	3,5	;RP0=0, select bank0
   314  07B1  1303               	bcf	3,6	;RP1=0, select bank0
   315  07B2  1D06               	btfss	6,2	;volatile
   316  07B3  2FC6               	goto	l621
   317                           
   318                           ;main.c: 54: {
   319                           ;main.c: 55: set_duty_cycle(250);
   320  07B4  30FA               	movlw	250
   321  07B5  00F0               	movwf	set_duty_cycle@DC
   322  07B6  3000               	movlw	0
   323  07B7  00F1               	movwf	set_duty_cycle@DC+1
   324  07B8  120A  118A  274E  120A  118A  	fcall	_set_duty_cycle
   325                           
   326                           ;main.c: 56: _delay((unsigned long)((100)*(4000000/4000.0)));
   327  07BD  3082               	movlw	130
   328  07BE  00F5               	movwf	??_main+1
   329  07BF  30DD               	movlw	221
   330  07C0  00F4               	movwf	??_main
   331  07C1                     u197:	
   332  07C1  0BF4               	decfsz	??_main,f
   333  07C2  2FC1               	goto	u197
   334  07C3  0BF5               	decfsz	??_main+1,f
   335  07C4  2FC1               	goto	u197
   336  07C5  2FC6               	nop2
   337  07C6                     l621:	
   338                           
   339                           ;main.c: 57: }
   340                           ;main.c: 58: if (RB3)
   341  07C6  1283               	bcf	3,5	;RP0=0, select bank0
   342  07C7  1303               	bcf	3,6	;RP1=0, select bank0
   343  07C8  1D86               	btfss	6,3	;volatile
   344  07C9  2FDC               	goto	l627
   345                           
   346                           ;main.c: 59: {
   347                           ;main.c: 60: set_duty_cycle(375);
   348  07CA  3077               	movlw	119
   349  07CB  00F0               	movwf	set_duty_cycle@DC
   350  07CC  3001               	movlw	1
   351  07CD  00F1               	movwf	set_duty_cycle@DC+1
   352  07CE  120A  118A  274E  120A  118A  	fcall	_set_duty_cycle
   353                           
   354                           ;main.c: 61: _delay((unsigned long)((100)*(4000000/4000.0)));
   355  07D3  3082               	movlw	130
   356  07D4  00F5               	movwf	??_main+1
   357  07D5  30DD               	movlw	221
   358  07D6  00F4               	movwf	??_main
   359  07D7                     u207:	
   360  07D7  0BF4               	decfsz	??_main,f
   361  07D8  2FD7               	goto	u207
   362  07D9  0BF5               	decfsz	??_main+1,f
   363  07DA  2FD7               	goto	u207
   364  07DB  2FDC               	nop2
   365  07DC                     l627:	
   366                           
   367                           ;main.c: 62: }
   368                           ;main.c: 63: if (RB4) {
   369  07DC  1283               	bcf	3,5	;RP0=0, select bank0
   370  07DD  1303               	bcf	3,6	;RP1=0, select bank0
   371  07DE  1E06               	btfss	6,4	;volatile
   372  07DF  2FF2               	goto	l633
   373                           
   374                           ;main.c: 64: set_duty_cycle(500);
   375  07E0  30F4               	movlw	244
   376  07E1  00F0               	movwf	set_duty_cycle@DC
   377  07E2  3001               	movlw	1
   378  07E3  00F1               	movwf	set_duty_cycle@DC+1
   379  07E4  120A  118A  274E  120A  118A  	fcall	_set_duty_cycle
   380                           
   381                           ;main.c: 65: _delay((unsigned long)((100)*(4000000/4000.0)));
   382  07E9  3082               	movlw	130
   383  07EA  00F5               	movwf	??_main+1
   384  07EB  30DD               	movlw	221
   385  07EC  00F4               	movwf	??_main
   386  07ED                     u217:	
   387  07ED  0BF4               	decfsz	??_main,f
   388  07EE  2FED               	goto	u217
   389  07EF  0BF5               	decfsz	??_main+1,f
   390  07F0  2FED               	goto	u217
   391  07F1  2FF2               	nop2
   392  07F2                     l633:	
   393                           
   394                           ;main.c: 66: }
   395                           ;main.c: 67: _delay((unsigned long)((10)*(4000000/4000.0)));
   396  07F2  300D               	movlw	13
   397  07F3  00F5               	movwf	??_main+1
   398  07F4  30FB               	movlw	251
   399  07F5  00F4               	movwf	??_main
   400  07F6                     u227:	
   401  07F6  0BF4               	decfsz	??_main,f
   402  07F7  2FF6               	goto	u227
   403  07F8  0BF5               	decfsz	??_main+1,f
   404  07F9  2FF6               	goto	u227
   405  07FA  2FFB               	nop2
   406  07FB  2F86               	goto	l605
   407  07FC                     __end_of_main:	
   408                           ;main.c: 68: }
   409                           ;main.c: 70: return;
   410                           
   411                           
   412                           	psect	text1
   413  074E                     __ptext1:	
   414 ;; *************** function _set_duty_cycle *****************
   415 ;; Defined at:
   416 ;;		line 73 in file "main.c"
   417 ;; Parameters:    Size  Location     Type
   418 ;;  DC              2    0[COMMON] unsigned int 
   419 ;; Auto vars:     Size  Location     Type
   420 ;;		None
   421 ;; Return value:  Size  Location     Type
   422 ;;                  1    wreg      void 
   423 ;; Registers used:
   424 ;;		wreg, status,2, status,0
   425 ;; Tracked objects:
   426 ;;		On entry : 0/0
   427 ;;		On exit  : 0/0
   428 ;;		Unchanged: 0/0
   429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   430 ;;      Params:         2       0       0       0       0
   431 ;;      Locals:         0       0       0       0       0
   432 ;;      Temps:          2       0       0       0       0
   433 ;;      Totals:         4       0       0       0       0
   434 ;;Total ram usage:        4 bytes
   435 ;; Hardware stack levels used:    1
   436 ;; This function calls:
   437 ;;		Nothing
   438 ;; This function is called by:
   439 ;;		_main
   440 ;; This function uses a non-reentrant model
   441 ;;
   442                           
   443                           
   444                           ;psect for function _set_duty_cycle
   445  074E                     _set_duty_cycle:	
   446                           
   447                           ;main.c: 75: if (DC < 1024) {
   448                           
   449                           ;incstack = 0
   450                           ; Regs used in _set_duty_cycle: [wreg+status,2+status,0]
   451  074E  3004               	movlw	4
   452  074F  0271               	subwf	set_duty_cycle@DC+1,w
   453  0750  3000               	movlw	0
   454  0751  1903               	skipnz
   455  0752  0270               	subwf	set_duty_cycle@DC,w
   456  0753  1803               	skipnc
   457  0754  0008               	return
   458                           
   459                           ;main.c: 76: CCP1Y=DC &1 ;
   460  0755  1C70               	btfss	set_duty_cycle@DC,0
   461  0756  2F5B               	goto	u100
   462  0757  1283               	bcf	3,5	;RP0=0, select bank0
   463  0758  1303               	bcf	3,6	;RP1=0, select bank0
   464  0759  1617               	bsf	23,4	;volatile
   465  075A  2F5E               	goto	u114
   466  075B                     u100:	
   467  075B  1283               	bcf	3,5	;RP0=0, select bank0
   468  075C  1303               	bcf	3,6	;RP1=0, select bank0
   469  075D  1217               	bcf	23,4	;volatile
   470  075E                     u114:	
   471                           
   472                           ;main.c: 77: CCP1X=DC & 2;
   473  075E  1297               	bcf	23,5	;volatile
   474                           
   475                           ;main.c: 78: CCPR1L= DC >>2 ;
   476  075F  0871               	movf	set_duty_cycle@DC+1,w
   477  0760  00F3               	movwf	??_set_duty_cycle+1
   478  0761  0870               	movf	set_duty_cycle@DC,w
   479  0762  00F2               	movwf	??_set_duty_cycle
   480  0763  1003               	clrc
   481  0764  0CF3               	rrf	??_set_duty_cycle+1,f
   482  0765  0CF2               	rrf	??_set_duty_cycle,f
   483  0766  1003               	clrc
   484  0767  0CF3               	rrf	??_set_duty_cycle+1,f
   485  0768  0CF2               	rrf	??_set_duty_cycle,f
   486  0769  0872               	movf	??_set_duty_cycle,w
   487  076A  0095               	movwf	21	;volatile
   488  076B  0008               	return
   489  076C                     __end_of_set_duty_cycle:	
   490  007E                     btemp	set	126	;btemp
   491  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7       7
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_set_duty_cycle

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0     278
                                              4 COMMON     3     3      0
                     _set_duty_cycle
 ---------------------------------------------------------------------------------
 (1) _set_duty_cycle                                       4     2      2     278
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _set_duty_cycle

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      7       7       1       50.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Sun Jun 14 14:50:27 2020

            __CFG_CP$OFF 0000                      l621 07C6                      l605 0786  
                    l615 07B0                      l633 07F2                      l609 079B  
                    l627 07DC                      _RB0 0030                      _RB1 0031  
                    _RB2 0032                      _RB3 0033                      _RD0 0040  
                    _RB4 0034                      _RD1 0041                      u100 075B  
                    u114 075E                      u207 07D7                      u217 07ED  
                    u227 07F6                      _PR2 0092                      u177 0794  
           __CFG_CPD$OFF 0000                      u187 07AB                      u197 07C1  
           __CFG_FOSC$XT 0000             __CFG_LVP$OFF 0000             __CFG_WRT$OFF 0000  
                   _main 076C                     btemp 007E            __CFG_BOREN$ON 0000  
                   start 0000                    ?_main 0070                    _CCP1X 00BD  
                  _CCP1Y 00BC            __CFG_WDTE$OFF 0000                    _TRISB 0086  
          __CFG_PWRTE$ON 0000                    status 0003                    wtemp0 007E  
        __initialization 07FC             __end_of_main 07FC         set_duty_cycle@DC 0070  
                 ??_main 0074                   _CCP1M2 00BA                   _CCP1M3 00BB  
                 _CCPR1L 0015                   _TMR2ON 0092                   _TRISD0 0440  
                 _TRISC2 043A                   _TRISD1 0441  __end_of__initialization 07FC  
         __pcstackCOMMON 0070  __size_of_set_duty_cycle 001E               __pmaintext 076C  
                _T2CKPS0 0090                  _T2CKPS1 0091                  __ptext1 074E  
   end_of_initialization 07FC           _set_duty_cycle 074E   __end_of_set_duty_cycle 076C  
    start_initialization 07FC          ?_set_duty_cycle 0070                ___latbits 0002  
          __size_of_main 0090         ??_set_duty_cycle 0072  
