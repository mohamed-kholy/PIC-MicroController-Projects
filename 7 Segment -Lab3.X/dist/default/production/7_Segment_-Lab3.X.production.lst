

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Sun Jun 07 09:58:43 2020

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	inittext,global,class=CODE,delta=2
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	dabs	1,0x7E,2
    12  0000                     
    13                           ; Version 1.41
    14                           ; Generated 25/01/2017 GMT
    15                           ; 
    16                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    17                           ; All rights reserved.
    18                           ; 
    19                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    20                           ; 
    21                           ; Redistribution and use in source and binary forms, with or without modification, are
    22                           ; permitted provided that the following conditions are met:
    23                           ; 
    24                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    25                           ;        conditions and the following disclaimer.
    26                           ; 
    27                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    28                           ;        of conditions and the following disclaimer in the documentation and/or other
    29                           ;        materials provided with the distribution.
    30                           ; 
    31                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    32                           ;        software without specific prior written permission.
    33                           ; 
    34                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    35                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    36                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    37                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    38                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    39                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    40                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    41                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    42                           ; 
    43                           ; 
    44                           ; Code-generator required, PIC16F877A Definitions
    45                           ; 
    46                           ; SFR Addresses
    47  0000                     	;# 
    48  0001                     	;# 
    49  0002                     	;# 
    50  0003                     	;# 
    51  0004                     	;# 
    52  0005                     	;# 
    53  0006                     	;# 
    54  0007                     	;# 
    55  0008                     	;# 
    56  0009                     	;# 
    57  000A                     	;# 
    58  000B                     	;# 
    59  000C                     	;# 
    60  000D                     	;# 
    61  000E                     	;# 
    62  000E                     	;# 
    63  000F                     	;# 
    64  0010                     	;# 
    65  0011                     	;# 
    66  0012                     	;# 
    67  0013                     	;# 
    68  0014                     	;# 
    69  0015                     	;# 
    70  0015                     	;# 
    71  0016                     	;# 
    72  0017                     	;# 
    73  0018                     	;# 
    74  0019                     	;# 
    75  001A                     	;# 
    76  001B                     	;# 
    77  001B                     	;# 
    78  001C                     	;# 
    79  001D                     	;# 
    80  001E                     	;# 
    81  001F                     	;# 
    82  0081                     	;# 
    83  0085                     	;# 
    84  0086                     	;# 
    85  0087                     	;# 
    86  0088                     	;# 
    87  0089                     	;# 
    88  008C                     	;# 
    89  008D                     	;# 
    90  008E                     	;# 
    91  0091                     	;# 
    92  0092                     	;# 
    93  0093                     	;# 
    94  0094                     	;# 
    95  0098                     	;# 
    96  0099                     	;# 
    97  009C                     	;# 
    98  009D                     	;# 
    99  009E                     	;# 
   100  009F                     	;# 
   101  010C                     	;# 
   102  010D                     	;# 
   103  010E                     	;# 
   104  010F                     	;# 
   105  018C                     	;# 
   106  018D                     	;# 
   107                           
   108                           	psect	idataBANK0
   109  0797                     __pidataBANK0:	
   110                           
   111                           ;initializer for main@F1099
   112  0797  3403               	retlw	3
   113  0798  349F               	retlw	159
   114  0799  3425               	retlw	37
   115  079A  340C               	retlw	12
   116  079B  3499               	retlw	153
   117  079C  3448               	retlw	72
   118  079D  3441               	retlw	65
   119  079E  341F               	retlw	31
   120  079F  3400               	retlw	0
   121  07A0  3409               	retlw	9
   122  0006                     _PORTB	set	6
   123  0086                     _TRISB	set	134
   124                           
   125                           ; #config settings
   126  0000                     
   127                           	psect	cinit
   128  07F0                     start_initialization:	
   129  07F0                     __initialization:	
   130                           
   131                           ; Initialize objects allocated to BANK0
   132  07F0  1383               	bcf	3,7	;select IRP bank0
   133  07F1  3035               	movlw	low (__pdataBANK0+10)
   134  07F2  00FD               	movwf	btemp+-1
   135  07F3  3007               	movlw	high __pidataBANK0
   136  07F4  00FE               	movwf	btemp
   137  07F5  3097               	movlw	low __pidataBANK0
   138  07F6  00FF               	movwf	btemp+1
   139  07F7  302B               	movlw	low __pdataBANK0
   140  07F8  0084               	movwf	4
   141  07F9  120A  118A  27A5   	fcall	init_ram0
   142  07FC                     end_of_initialization:	
   143                           ;End of C runtime variable initialization code
   144                           
   145  07FC                     __end_of__initialization:	
   146  07FC  0183               	clrf	3
   147  07FD  120A  118A  2FB2   	ljmp	_main	;jump to C main() function
   148                           
   149                           	psect	dataBANK0
   150  002B                     __pdataBANK0:	
   151  002B                     main@F1099:	
   152  002B                     	ds	10
   153                           
   154                           	psect	inittext
   155  07A1                     init_fetch0:	
   156                           ;	Called with low address in FSR and high address in W
   157                           
   158  07A1  087E               	movf	126,w
   159  07A2  008A               	movwf	10
   160  07A3  087F               	movf	127,w
   161  07A4  0082               	movwf	2
   162  07A5                     init_ram0:	
   163                           ;Called with:
   164                           ;	high address of idata address in btemp 
   165                           ;	low address of idata address in btemp+1 
   166                           ;	low address of data in FSR
   167                           ;	high address + 1 of data in btemp-1
   168                           
   169  07A5  27A1  120A  118A   	fcall	init_fetch0
   170  07A8  0080               	movwf	0
   171  07A9  0A84               	incf	4,f
   172  07AA  0804               	movf	4,w
   173  07AB  067D               	xorwf	125,w
   174  07AC  1903               	btfsc	3,2
   175  07AD  3400               	retlw	0
   176  07AE  0AFF               	incf	127,f
   177  07AF  1903               	btfsc	3,2
   178  07B0  0AFE               	incf	126,f
   179  07B1  2FA5               	goto	init_ram0
   180                           
   181                           	psect	cstackCOMMON
   182  0070                     __pcstackCOMMON:	
   183  0070                     ?_main:	
   184  0070                     ??_main:	
   185                           ; 1 bytes @ 0x0
   186                           
   187                           
   188                           ; 1 bytes @ 0x0
   189  0070                     	ds	4
   190                           
   191                           	psect	cstackBANK0
   192  0020                     __pcstackBANK0:	
   193  0020                     main@segment_array:	
   194                           
   195                           ; 10 bytes @ 0x0
   196  0020                     	ds	10
   197  002A                     main@counter:	
   198                           
   199                           ; 1 bytes @ 0xA
   200  002A                     	ds	1
   201                           
   202                           	psect	maintext
   203  07B2                     __pmaintext:	
   204 ;;
   205 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   206 ;;
   207 ;; *************** function _main *****************
   208 ;; Defined at:
   209 ;;		line 13 in file "main.c"
   210 ;; Parameters:    Size  Location     Type
   211 ;;		None
   212 ;; Auto vars:     Size  Location     Type
   213 ;;  segment_arra   10    0[BANK0 ] unsigned char [10]
   214 ;;  counter         1   10[BANK0 ] unsigned char 
   215 ;; Return value:  Size  Location     Type
   216 ;;                  1    wreg      void 
   217 ;; Registers used:
   218 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   219 ;; Tracked objects:
   220 ;;		On entry : B00/0
   221 ;;		On exit  : 0/0
   222 ;;		Unchanged: 0/0
   223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   224 ;;      Params:         0       0       0       0       0
   225 ;;      Locals:         0      11       0       0       0
   226 ;;      Temps:          4       0       0       0       0
   227 ;;      Totals:         4      11       0       0       0
   228 ;;Total ram usage:       15 bytes
   229 ;; This function calls:
   230 ;;		Nothing
   231 ;; This function is called by:
   232 ;;		Startup code after reset
   233 ;; This function uses a non-reentrant model
   234 ;;
   235                           
   236                           
   237                           ;psect for function _main
   238  07B2                     _main:	
   239                           
   240                           ;main.c: 14: unsigned char segment_array[10] = {0x03,0x9F,0x25,0x0C,0x99,0x48,0x41,0x1F,
      +                          0x00,0x09};
   241                           
   242                           ;incstack = 0
   243                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0]
   244  07B2  3020               	movlw	main@segment_array& (0+255)
   245  07B3  0084               	movwf	4
   246  07B4  302B               	movlw	low main@F1099
   247  07B5  00F0               	movwf	??_main
   248  07B6  0804               	movf	4,w
   249  07B7  00F1               	movwf	??_main+1
   250  07B8  300A               	movlw	10
   251  07B9  00F2               	movwf	??_main+2
   252  07BA                     u30:	
   253  07BA  0870               	movf	??_main,w
   254  07BB  0084               	movwf	4
   255  07BC  1383               	bcf	3,7	;select IRP bank0
   256  07BD  0800               	movf	0,w
   257  07BE  00F3               	movwf	??_main+3
   258  07BF  0AF0               	incf	??_main,f
   259  07C0  0871               	movf	??_main+1,w
   260  07C1  0084               	movwf	4
   261  07C2  0873               	movf	??_main+3,w
   262  07C3  0080               	movwf	0
   263  07C4  0AF1               	incf	??_main+1,f
   264  07C5  0BF2               	decfsz	??_main+2,f
   265  07C6  2FBA               	goto	u30
   266                           
   267                           ;main.c: 15: unsigned char counter = 0;
   268  07C7  1283               	bcf	3,5	;RP0=0, select bank0
   269  07C8  1303               	bcf	3,6	;RP1=0, select bank0
   270  07C9  01AA               	clrf	main@counter
   271                           
   272                           ;main.c: 16: TRISB = 0x00;
   273  07CA  1683               	bsf	3,5	;RP0=1, select bank1
   274  07CB  1303               	bcf	3,6	;RP1=0, select bank1
   275  07CC  0186               	clrf	6	;volatile
   276                           
   277                           ;main.c: 17: PORTB= 0xFF;
   278  07CD  30FF               	movlw	255
   279  07CE  1283               	bcf	3,5	;RP0=0, select bank0
   280  07CF  1303               	bcf	3,6	;RP1=0, select bank0
   281  07D0  0086               	movwf	6	;volatile
   282  07D1                     l501:	
   283                           ;main.c: 18: while(1){
   284                           
   285                           
   286                           ;main.c: 19: PORTB=segment_array[counter];
   287  07D1  082A               	movf	main@counter,w
   288  07D2  3E20               	addlw	(low (main@segment_array| 0))& (0+255)
   289  07D3  0084               	movwf	4
   290  07D4  1383               	bcf	3,7	;select IRP bank0
   291  07D5  0800               	movf	0,w
   292  07D6  0086               	movwf	6	;volatile
   293                           
   294                           ;main.c: 20: _delay((unsigned long)((1000)*(4000000/4000.0)));
   295  07D7  3006               	movlw	6
   296  07D8  00F2               	movwf	??_main+2
   297  07D9  3013               	movlw	19
   298  07DA  00F1               	movwf	??_main+1
   299  07DB  30AD               	movlw	173
   300  07DC  00F0               	movwf	??_main
   301  07DD                     u57:	
   302  07DD  0BF0               	decfsz	??_main,f
   303  07DE  2FDD               	goto	u57
   304  07DF  0BF1               	decfsz	??_main+1,f
   305  07E0  2FDD               	goto	u57
   306  07E1  0BF2               	decfsz	??_main+2,f
   307  07E2  2FDD               	goto	u57
   308  07E3  2FE4               	nop2
   309                           
   310                           ;main.c: 21: counter++;
   311  07E4  3001               	movlw	1
   312  07E5  00F0               	movwf	??_main
   313  07E6  0870               	movf	??_main,w
   314  07E7  1283               	bcf	3,5	;RP0=0, select bank0
   315  07E8  1303               	bcf	3,6	;RP1=0, select bank0
   316  07E9  07AA               	addwf	main@counter,f
   317                           
   318                           ;main.c: 22: if(counter ==10)
   319  07EA  300A               	movlw	10
   320  07EB  062A               	xorwf	main@counter,w
   321  07EC  1D03               	btfss	3,2
   322  07ED  2FD1               	goto	l501
   323                           
   324                           ;main.c: 23: counter=0;
   325  07EE  01AA               	clrf	main@counter
   326  07EF  2FD1               	goto	l501
   327  07F0                     __end_of_main:	
   328                           ;main.c: 25: }
   329                           ;main.c: 27: return;
   330                           
   331  007E                     btemp	set	126	;btemp
   332  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        10
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      4       4
    BANK0            80     11      21
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                15    15      0      71
                                              0 COMMON     4     4      0
                                              0 BANK0     11    11      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 0
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      B      15       5       26.3%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      4       4       1       28.6%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      19      12        0.0%
ABS                  0      0      19       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Sun Jun 07 09:58:43 2020

                      pc 0002              __CFG_CP$OFF 0000                       u30 07BA  
                     u57 07DD                       fsr 0004                      l501 07D1  
           __CFG_CPD$OFF 0000                      fsr0 0004                      indf 0000  
           __CFG_FOSC$XT 0000             __CFG_LVP$OFF 0000              main@counter 002A  
           __CFG_WRT$OFF 0000                     _main 07B2                     btemp 007E  
          __CFG_BOREN$ON 0000                     start 0000                    ?_main 0070  
          __CFG_WDTE$OFF 0000                    _PORTB 0006                    _TRISB 0086  
          __CFG_PWRTE$ON 0000                    pclath 000A                    status 0003  
                  wtemp0 007E          __initialization 07F0             __end_of_main 07F0  
                 ??_main 0070  __end_of__initialization 07FC           __pcstackCOMMON 0070  
           __pidataBANK0 0797               __pmaintext 07B2        main@segment_array 0020  
   end_of_initialization 07FC      start_initialization 07F0               init_fetch0 07A1  
            __pdataBANK0 002B                ___latbits 0002            __pcstackBANK0 0020  
              main@F1099 002B            __size_of_main 003E                 init_ram0 07A5  
